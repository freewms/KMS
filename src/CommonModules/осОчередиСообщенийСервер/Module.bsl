#Область ПрограммныйИнтерфейс

//// Возвращает структуру настроек соединения по ссылке или, если ссылка не указана, настройки соединения по умолчанию
//// Параметры:
////	 НастройкиСоединения - СправочникСсылка.осНастройкиСоединений - ссылка на настройки соединения
//// Возвращаемое значение:
//// СтруктураНастроекСоединения - Структура - структура настроек соединения:
////  * Сервер - Строка - имя кластера Kafka
////  * Порт - Число - порт кластера Kafka
////  * Пользователь - Строка - пользователь кластера Kafka
////  * Пароль - Строка - пароль пользователя кластера Kafka
////  * ЗащищенноеСоединение - Булево - использовать защищенное соединение с кластером Kafka
////  * ИспользоватьАутентификациюОС - Булево - использовать аутентификацию ОС для соединения с кластером Kafka
////  * ИспользоватьПрокси - Булево - работать через прокси-сервер 
////  * ПроксиСервер - Строка - имя прокси-сервера
////  * ПроксиПорт - Число - порт прокси-сервера
////  * ПроксиИспользоватьАутентификациюОС - Булево - использовать аутентификацию ОС на прокси-сервере
////  * Пользователь - Строка - пользователь прокси-сервера
////  * ПроксиПароль - Строка - пароль пользователя прокси-сервера
////  * Таймаут - Число - таймаут соединения с кластером Kafka
//Функция ПолучитьСтруктуруНастроекСоединенияПоНастройке(НастройкиСоединения = Неопределено) Экспорт
//	
//	Если НастройкиСоединения = Неопределено Тогда 
//		СтруктураНастроекСоединения = осОчередиСообщенийСерверПовтИсп.ПолучитьСтруктуруНастроекСоединенияПоУмолчанию();	
//	Иначе
//		СтруктураНастроекСоединения = ПолучитьСтруктуруНастроекСоединения(НастройкиСоединения);	
//	КонецЕсли;

//	Возврат СтруктураНастроекСоединения;
//	
//КонецФункции

//// Возвращает соединение по структуре настроек, полученных из функции "ПолучитьСтруктуруНастроекСоединения"
//// Параметры:
////	СтруктураНастроекСоединения - Структура - настройки соединения, полученные из функции "ПолучитьСтруктуруНастроекСоединения"
//// Возвращаемое значение:
////  Соединение - HTTPСоединение - соединение по структуре настроек
//Функция ПолучитьСоединениеПоСтруктуреНастроек(СтруктураНастроекСоединения) Экспорт
//	Возврат ПолучитьСоединение(СтруктураНастроекСоединения);	
//КонецФункции

//// Возвращает структуру описания службы сообщений
//// Возвращаемое значение:
//// ОписаниеСлужбыСообщений - Структура - содержит:
////  * Очередь - Строка - имя очереди сообщений
////  * Группа - Строка - группа чтения в разрезе которой сохраняются и контролируются смещения
////  * РазмерПачки - Число - количество байт, получаемое из очереди за одно обращение
////  * РежимПодтвержденияСообщений - Перечисление.осРежимПодтвержденияСообщенийПоУмолчанию - определяет каким образом будет
////  фиксироваться получение сообщения: автоматически при чтении или вручную
//Функция ПолучитьОписаниеСлужбыСообщений() Экспорт
//	Возврат осОчередиСообщенийСервер.ПолучитьОписаниеСлужбыСообщений();	
//КонецФункции

////// Возвращает структуру описания фонового задания
////// Возвращаемое значение:
////// ОписаниеФоновогоЗадания - Структура - содержит:
//////  * ИмяМетода - Строка - название пользовательского метода для запуска этим менеджером
//////  * Параметры - Массив - массив параметров для пользовательского метода
////Функция ПолучитьОписаниеФоновогоЗадания() Экспорт
////	Возврат осОчередиСообщенийСервер.ПолучитьОписаниеФоновогоЗадания();
////КонецФункции	

//// Получает сообщения из очереди, на которую подписан подписчик, состоящий в группе чтения (по структуре настроек соединения)
//// Параметры: 
////  Группа - Строка - группа чтения, в которой состоит подписчик
////	Подписчик - Строка - идентификатор подписчика, зарегистрированного в группе и подписанного на очереди
////  РазмерПачки - Число - количество байт, получаемое из очереди за одно обращение
////	СтруктураНастроекСоединения - Структура - настройки соединения, полученные из функции "ПолучитьСтруктуруНастроекСоединения"
//// Возвращаемое значение:
//// ОписаниеРезультата - Структура - структура описания результата выполнения
////  КодОшибки - Число - числовой код ошибки Kafka (Неопределено в случае успеха)
////	ОписаниеОшибки - Строка - текстовое описание ошибки
////	Данные - ТаблицаЗначений - таблица значений с полями:
////   * Очередь - Строка - имя очереди
////   * Раздел - Число - номер раздела
////   * Смещение - Число - смещение чтения
////   * Сообщение - Строка - сообщение
//Функция ПолучитьСообщения(Группа, Подписчик, РазмерПачки, СтруктураНастроекСоединения = Неопределено) Экспорт 		
//	Возврат осОчередиСообщенийСервер.ПолучитьСообщения(Группа, Подписчик, РазмерПачки, СтруктураНастроекСоединения);   	
//КонецФункции

//// Получает сообщения из очереди, на которую подписан подписчик, состоящий в группе чтения (по соединению)
//// Параметры: 
////  Группа - Строка - группа чтения, в которой состоит подписчик
////	Подписчик - Строка - идентификатор подписчика, зарегистрированного в группе и подписанного на очереди
////  РазмерПачки - Число - количество байт, получаемое из очереди за одно обращение
////	Соединение - HTTPСоединение - HTTP-соединение
//// Возвращаемое значение:
//// ОписаниеРезультата - Структура - структура описания результата выполнения
////  КодОшибки - Число - числовой код ошибки Kafka (Неопределено в случае успеха)
////	ОписаниеОшибки - Строка - текстовое описание ошибки
////	Данные - ТаблицаЗначений - таблица значений с полями:
////   * Очередь - Строка - имя очереди
////   * Раздел - Число - номер раздела
////   * Смещение - Число - смещение чтения
////   * Сообщение - Строка - сообщение
//Функция ПолучитьСообщенияПоСоединению(Группа, Подписчик, РазмерПачки, Соединение) Экспорт 		
//	Возврат осОчередиСообщенийСервер.ПолучитьСообщенияПоСоединению(Группа, Подписчик, РазмерПачки, Соединение);   	
//КонецФункции

//// Устанавливает смещение для группы в очереди (по структуре настроек соединения)
//// Параметры:
////  Очередь - Строка - имя очереди сообщений
////  Группа - Строка - группа чтения
////  Подписчик - Строка - имя подписчика
////  Раздел - Число - раздел очереди
////  Смещение - Число - устанавливаемое смещение
////	СтруктураНастроекСоединения - Структура - настройки соединения, полученные из функции "ПолучитьСтруктуруНастроекСоединения"
//// Возвращаемое значение:
//// ОписаниеРезультата - Структура - структура описания результата выполнения
////  КодОшибки - Число - числовой код ошибки Kafka (Неопределено в случае успеха)
////	ОписаниеОшибки - Строка - текстовое описание ошибки
////	Данные - Неопределено
//Функция ЗафиксироватьСмещение(Очередь, Группа, Подписчик, Раздел, Смещение, СтруктураНастроекСоединения = Неопределено) Экспорт
//	Возврат осОчередиСообщенийСервер.ЗафиксироватьСмещение(Очередь, Группа, Подписчик, Раздел, Смещение, СтруктураНастроекСоединения);
//КонецФункции

//// Устанавливает смещение для группы в очереди (по соединению)
//// Параметры:
////  Очередь - Строка - имя очереди сообщений
////  Группа - Строка - группа чтения
////  Раздел - Число - раздел очереди
////  Смещение - Число - устанавливаемое смещение
////	Соединение - HTTPСоединение - HTTP-соединение
//// Возвращаемое значение:
//// ОписаниеРезультата - Структура - структура описания результата выполнения
////  КодОшибки - Число - числовой код ошибки Kafka (Неопределено в случае успеха)
////	ОписаниеОшибки - Строка - текстовое описание ошибки
////	Данные - Неопределено
//Функция ЗафиксироватьСмещениеПоСоединению(Очередь, Группа, Подписчик, Раздел, Смещение, Соединение) Экспорт
//	Возврат осОчередиСообщенийСервер.ЗафиксироватьСмещениеПоСоединению(Очередь, Группа, Подписчик, Раздел, Смещение, Соединение);
//КонецФункции

// Отправляет сообщение в очередь (по структуре настроек соединения)
// Параметры:
//  Очередь - Строка - имя очереди сообщений
//  Сообщение - Строка - отправляемое сообщение
//  СтруктураНастроекСоединения - Структура - настройки соединения, полученные из функции "ПолучитьСтруктуруНастроекСоединения"
// Возвращаемое значение:
// ОписаниеРезультата - Структура - структура описания результата выполнения
//  КодОшибки - Число - числовой код ошибки Kafka (Неопределено в случае успеха)
//   ОписаниеОшибки - Строка - текстовое описание ошибки
//   Данные - Структура - структура с полями:
//   * Раздел - Число - номер раздела
//   * Смещение - Число - смещение
//   * КодОшибкиДанных - Число - код ошибки записи строки
//   * ОписаниеОшибкиДанных - Строка - текстовое описание ошибки записи строки 
Функция ОтправитьСообщение(Очередь, Сообщение, Соединение = Неопределено) Экспорт 		
	
	ОписаниеОшибки = ПолучитьОписаниеРезультатаВыполненияВнешнегоМетода();
	
	Если Соединение = Неопределено Тогда
		Соединение = осОчередиСообщенийСерверПовтИсп.ПолучитьСоединение();
	КонецЕсли;
	
	Если Соединение = Неопределено Тогда
		ОписаниеОшибки.КодОшибки = 001;
		ОписаниеОшибки.ОписаниеОшибки = "Не настроено соединение для сервера очереди сообщений";
		Возврат ОписаниеОшибки;
	КонецЕсли;
	     
	Возврат ОбработкаСобытийОтправитьСообщение(Очередь,Сообщение,Соединение);
	
КонецФункции


//Отправляет сообщение в очередь (по соединению)
//Параметры:
// Очередь - Строка - имя очереди сообщений
// Сообщение - Строка - отправляемое сообщение
// Соединение - HTTPСоединение - соединение с сервером Kafka"
//Возвращаемое значение:
//ОписаниеРезультата - Структура - структура описания результата выполнения
// КодОшибки - Число - числовой код ошибки Kafka (Неопределено в случае успеха)
//   ОписаниеОшибки - Строка - текстовое описание ошибки
//   Данные - Структура - структура с полями:
//  * Раздел - Число - номер раздела
//  * Смещение - Число - смещение
//  * КодОшибкиДанных - Число - код ошибки записи строки
//  * ОписаниеОшибкиДанных - Строка - текстовое описание ошибки записи строки 
Функция ОтправитьСообщениеПоСоединению(Очередь, Сообщение, Соединение) Экспорт 		
	
	Возврат ОбработкаСобытийОтправитьСообщение(Очередь,Сообщение,Соединение);
	
КонецФункции

//// Отправляет сообщения из массива в очередь (по соединению)
//// Параметры:
////  Очередь - Строка - имя очереди сообщений
////  МассивСообщений - Массив - массив строк отправляемых сообщений
////	Соединение - HTTPСоединение - HTTP-соединение
//// Возвращаемое значение:
//// ОписаниеРезультата - Структура - структура описания результата выполнения
////  КодОшибки - Число - числовой код ошибки Kafka (Неопределено в случае успеха)
////	ОписаниеОшибки - Строка - текстовое описание ошибки
////	Данные - ТаблицаЗначений - таблица значений с полями:
////   * Раздел - Число - номер раздела
////   * Смещение - Число - смещение
////   * КодОшибкиДанных - Число - код ошибки записи строки
////   * ОписаниеОшибкиДанных - Строка - текстовое описание ошибки записи строки
//Функция ОтправитьМассивСообщений(Очередь, МассивСообщений, Соединение) Экспорт
//	Возврат осОчередиСообщенийСервер.ОтправитьМассивСообщений(Очередь, МассивСообщений, Соединение);	
//КонецФункции

//// Обеспечивает многопоточный запуск пользовательских методов для чтения и обработки сообщений очереди.
//// Параметры:
////  ОписаниеСлужбыСообщений - Структура - структура с полями:
////    * Очередь - Строка - имя очереди сообщений
////    * Группа - Строка - группа чтения в разрезе которой сохраняются и контролируются смещения
////    * РазмерПачки - Число - количество байт, получаемое из очереди за одно обращение
////    * РежимПодтвержденияСообщений - Перечисление.осРежимПодтвержденияСообщенийПоУмолчанию - определяет каким образом будет
////	  фиксироваться получение сообщения: автоматически при чтении или вручную
////    * НастройкиСоединения - Структура - настройки соединения, полученные из функции "ПолучитьСтруктуруНастроекСоединения"
////  ОписаниеФоновогоЗадания - Структура - структура с полями:
////    * ИмяМетода - Строка - название пользовательского метода для запуска этим менеджером
////    * Параметры - Массив - массив параметров для пользовательского метода
//Процедура ЗапуститьОбработкуОчереди(ОписаниеСлужбыСообщений, ОписаниеФоновогоЗадания) Экспорт        	
//	осОчередиСообщенийСервер.ЗапуститьОбработкуОчереди(ОписаниеСлужбыСообщений, ОписаниеФоновогоЗадания);		
//КонецПроцедуры

//// Останавливает фоновые задания, обрабатывающие сообщения очереди 
//// Параметры:
////	ОписаниеСлужбыСообщений - Структура - структура с полями:
////    * Очередь - Строка - имя очереди сообщений
////    * Группа - Строка - группа чтения
////    * НастройкиСоединения - Структура - настройки соединения, полученные из функции "ПолучитьСтруктуруНастроекСоединения"
////  ОписаниеФоновогоЗадания - Структура - структура с полями:
////    * ИмяМетода - Строка - название пользовательского метода 
//Процедура ОстановитьОбработкуОчереди(ОписаниеСлужбыСообщений, ОписаниеФоновогоЗадания) Экспорт  	
//	осОчередиСообщенийСервер.ОстановитьОбработкуОчереди(ОписаниеСлужбыСообщений, ОписаниеФоновогоЗадания);		
//КонецПроцедуры	

//#КонецОбласти

//#Область СлужебныйПрограммныйИнтерфейсДействия

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейсОчереди


Функция ПолучитьСтруктуруОписанияОчереди() Экспорт
	
	Возврат Новый Структура("ИмяОчереди, Наименование, Тип, РазмерПачки, Ссылка");
	
КонецФункции

Функция ПолучитьОписаниеОчередиПоСсылке(Очередь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	осОчередиСообщений.Ссылка КАК Ссылка,
	|	осОчередиСообщений.Код КАК ИмяОчереди,
	|	осОчередиСообщений.Наименование КАК Наименование,
	|	осОчередиСообщений.РазмерПачки КАК РазмерПачки,
	|	осОчередиСообщений.Тип КАК Тип
	|ИЗ
	|	Справочник.осОчередиСообщений КАК осОчередиСообщений
	|ГДЕ
	|	осОчередиСообщений.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",Очередь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Количество() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка.Следующий();
	СтруктураОписанияОчереди = ПолучитьСтруктуруОписанияОчереди();
	ЗаполнитьЗначенияСвойств(СтруктураОписанияОчереди,Выборка);
	
	Возврат СтруктураОписанияОчереди;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейсФильтры

//ПРОВЕРЕНО
Функция ПолучитьСтруктуруОписанияФильтра() Экспорт
	
	Возврат Новый Структура("Наименование, Тип, Фильтр, Хеш");
	
КонецФункции

Функция ПолучитьОписаниеФильтраПоСсылке(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	осШаблоныФильтров.Фильтр КАК Фильтр
	|ИЗ
	|	Справочник.осШаблоныФильтров КАК осШаблоныФильтров
	|ГДЕ
	|	осШаблоныФильтров.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Фильтр;
	Иначе
		ОписаниеФильтра = Неопределено;
	КонецЕсли;
	
	Возврат ОписаниеФильтра;
	
КонецФункции

Функция ВычислитьХешШаблонаФильтра(ШаблонФильтра) Экспорт
	
	ОписаниеШаблона = ПолучитьСтруктуруОписанияФильтра();
	Если ТипЗнч(ШаблонФильтра) = Тип("СправочникСсылка.осШаблоныФильтров") Тогда
		ШаблонОбъект = ШаблонФильтра.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ОписаниеШаблона, ШаблонОбъект);
	ИначеЕсли ТипЗнч(ШаблонФильтра) = Тип("СправочникОбъект.осШаблоныФильтров") Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеШаблона, ШаблонФильтра);
	КонецЕсли;
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA256);			
	
	Хеширование.Добавить(Строка(ШаблонФильтра.Тип));
	Хеширование.Добавить(ШаблонФильтра.Фильтр);
	
	Возврат СтрЗаменить(Строка(Хеширование.ХешСумма)," ","");
	
КонецФункции

Функция ТекстНовогоПроизвольногоКодаФильтра() Экспорт
	
	Возврат
	"Правило фильтрации описывается на языке 1С или схемой компоновки данных. 
	|Возможно использование шаблонов.
	|
	|При использовании режима описания фильтра произвольным кодом, в коде
	|доступна переменная ""ПеременныеОкружения"", типа ""Структура"". 
	|Назначение переменной - кеширование данных при циклическом вызове обрабочика. 
	|Так же переменная обязательно содержит элемент ""МассивСообщений"", в которой
	|находится массив сообщений прочитанной пачки. После фильтрации сообщений, 
	|в этот же элемент необходимо передать массив сообщений, прошедших фильтр.
	|После выполнения кода, сообщения будут автоматически отправлены в очередь 
	|действий без дополнительных преобразований.
	|				  	
	|При использовании схемы компоновки данных, каждое сообщение из полученного 
	|массива сообщений очереди преобразуется методом ЗначениеИзСтрокиВнутр(), 
	|после чего подается на вход схемы компоновки данных массивом ссылок в параметр с
	|именем ""Ссылка"". В результате работы фильтра системой будет автоматически 
	|сформированы и отправлены  в очередь действий сообщения, прошедшие фильтр и 
	|преобразованные в строку методом ЗначениеВСтрокуВнутр().
	|
	|Примечание: если в результе обработки происходит исключение,
	| 			 текущий массив сообщений будет повторно получен
	|			 в следующем цикле обработки. В случае успешного
	|			 исполнения кода (без возникновения исключений),
	|			 сообщения будут считаться обработанными.
	|
	|Примечание: в случае необходимости ""слияния"" очередей необходимо
	|			 использовать настройку ""Не обрабатывать"". В
	|			 этом случае сообщения, полученные правилом фильтрации будут
	|			 помещены в результирующую очередь ""как есть"".";
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейсДействия

Функция ПолучитьОписаниеШаблонаДействия() Экспорт
	
	ШаблонДействия = Новый Структура();
	ШаблонДействия.Вставить("Код", 			"");
	ШаблонДействия.Вставить("Наименование", "");
	ШаблонДействия.Вставить("Метод", 		"");
	ШаблонДействия.Вставить("Тип", 			ПредопределенноеЗначение("Перечисление.осТипыШаблоновДействий.Предопределенный"));
	
	ПараметрыДействия = Новый ТаблицаЗначений;
	ПараметрыДействия.Колонки.Добавить("Представление");
	ПараметрыДействия.Колонки.Добавить("Тип");
	ПараметрыДействия.Колонки.Добавить("Обязательный");
	
	ШаблонДействия.Вставить("ПараметрыМетода", ПараметрыДействия);
	
	Возврат ШаблонДействия
	
КонецФункции

Функция ВычислитьХешШаблонаДействия(ШаблонДействия) Экспорт
	
	ОписаниеШаблона = осОчередиСообщенийСервер.ПолучитьОписаниеШаблонаДействия();
	Если ТипЗнч(ШаблонДействия) = Тип("СправочникСсылка.осШаблоныДействий") Тогда
		ШаблонОбъект = ШаблонДействия.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ОписаниеШаблона, ШаблонОбъект);
	ИначеЕсли ТипЗнч(ШаблонДействия) = Тип("СправочникОбъект.осШаблоныДействий") Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеШаблона, ШаблонДействия);
	КонецЕсли;
	
	Хеширование = Новый ХешированиеДанных(ХешФункция.SHA256);			
	
	Хеширование.Добавить(ШаблонДействия.Код);
	Хеширование.Добавить(ШаблонДействия.Метод);
	Хеширование.Добавить(Строка(ШаблонДействия.Тип));
	
	Если ТипЗнч(ШаблонДействия.ПараметрыМетода) = Тип("ХранилищеЗначения") Тогда
		ПараметрыМетодаСтрокой = ЗначениеВСтрокуВнутр(ШаблонДействия.ПараметрыМетода.Получить());
	Иначе
		ПараметрыМетодаСтрокой = ЗначениеВСтрокуВнутр(ШаблонДействия.ПараметрыМетода);
	КонецЕсли;
	Хеширование.Добавить(ПараметрыМетодаСтрокой);
	
	Возврат СтрЗаменить(Строка(Хеширование.ХешСумма)," ","");
	
КонецФункции

Функция ПолучитьТаблицуПредопределенныхШаблоновДействий() Экспорт
	
	ТаблицаШаблоновДействий = Новый ТаблицаЗначений;
	ТаблицаШаблоновДействий.Колонки.Добавить("Код", 		 	Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)));
	ТаблицаШаблоновДействий.Колонки.Добавить("Наименование",	Новый ОписаниеТипов("Строка"));
	ТаблицаШаблоновДействий.Колонки.Добавить("Тип", 		 	Новый ОписаниеТипов("ПеречислениеСсылка.осТипыШаблоновДействий"));
	ТаблицаШаблоновДействий.Колонки.Добавить("Метод", 			Новый ОписаниеТипов("Строка"));
	ТаблицаШаблоновДействий.Колонки.Добавить("ПараметрыМетода", Новый ОписаниеТипов("ХранилищеЗначения"));
	ТаблицаШаблоновДействий.Колонки.Добавить("Хеш", 			Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(64)));
	
	ШаблонДействия = осОчередиСообщенийСервер.ПолучитьОписаниеШаблонаДействия();
	осОчередиСообщенийСервер.УстановитьКод(ШаблонДействия, "ВыполнитьПроизвольныйКод");
	осОчередиСообщенийСервер.УстановитьНаименование(ШаблонДействия, "Выполнить произвольный код");
	осОчередиСообщенийСервер.УстановитьМетод(ШаблонДействия, "СобытияСервер.ВыполнитьПроизвольныйКод");
	ШаблонДействия.ПараметрыМетода = "";
	осОчередиСообщенийСервер.ДополнитьТаблицуШаблоновДействий(ТаблицаШаблоновДействий, ШаблонДействия);	
	
	осОчередиСообщенийСерверПереопределяемый.ПолучитьОписаниеШаблоновДействийПереопределяемый(ТаблицаШаблоновДействий);
	
	Возврат ТаблицаШаблоновДействий;
	
КонецФункции

Процедура УстановитьКод(ШаблонДействия, Код) Экспорт
	
	ШаблонДействия.Код = Код;
	
КонецПроцедуры

Процедура УстановитьНаименование(ШаблонДействия, Наименование) Экспорт
	
	ШаблонДействия.Наименование = Наименование;
	
КонецПроцедуры

Процедура УстановитьМетод(ШаблонДействия, Метод) Экспорт
	
	ШаблонДействия.Метод = Метод;
	
КонецПроцедуры

Процедура ДобавитьПараметрМетода(ШаблонДействия, Представление, Тип, Обязательный = Истина) Экспорт
	
	СтрокаПараметров = ШаблонДействия["ПараметрыМетода"].Добавить();
	СтрокаПараметров.Представление	= Представление;
	СтрокаПараметров.Тип = Тип;
	СтрокаПараметров.Обязательный = Обязательный;
	
КонецПроцедуры

Процедура ДополнитьТаблицуШаблоновДействий(ТаблицаШаблоновДействий, ШаблонДействия) Экспорт
	
	Если ШаблонДействия.Код = "" ИЛИ ШаблонДействия.Наименование = "" ИЛИ ШаблонДействия.Метод = "" Тогда
		ШаблонОписанияИсключения = НСтр("ru = 'Ошибка формирования шаблона метода.
		|Не заполнены обязательные поля:
		|Код: %1
		|Наименование: %2
		|Метод: %3'");;
		ВызватьИсключение СтрШаблон(ШаблонОписанияИсключения, ШаблонДействия.Код,  ШаблонДействия.Наименование,  ШаблонДействия.Метод);
	КонецЕсли;
	
	Если СтрДлина(ШаблонДействия.Код) > 50 Тогда
		ШаблонОписанияИсключения = НСтр("ru = 'Ошибка формирования шаблона для метода с кодом %1.
		|Длина кода превышает 50 символов.'");;
		ВызватьИсключение СтрШаблон(ШаблонОписанияИсключения,ШаблонДействия.Код);
	КонецЕсли;
	
	Если СтрДлина(ШаблонДействия.Наименование) > 150 Тогда
		ШаблонОписанияИсключения = НСтр("ru = 'Ошибка формирования шаблона для метода с кодом %1.
		|Длина наименования превышает 150 символов.'");;
		ВызватьИсключение СтрШаблон(ШаблонОписанияИсключения,ШаблонДействия.ШаблонДействия.Код);
	КонецЕсли;
	
	Если НЕ ТаблицаШаблоновДействий.Найти(ШаблонДействия.Код,"Код") = Неопределено Тогда
		ШаблонОписанияИсключения = НСтр("ru = 'Ошибка формирования шаблона для метода с кодом %1.
		|Присутствуют дублирующиеся коды.'");;
		ВызватьИсключение СтрШаблон(ШаблонОписанияИсключения,ШаблонДействия.ШаблонДействия.Код);
	КонецЕсли;
	
	ШаблонДействия.ПараметрыМетода = Новый ХранилищеЗначения(ШаблонДействия.ПараметрыМетода);
	
	СтрокаТаблицы = ТаблицаШаблоновДействий.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ШаблонДействия);
	СтрокаТаблицы.Хеш = осОчередиСообщенийСервер.ВычислитьХешШаблонаДействия(ШаблонДействия);
	
КонецПроцедуры

Функция ТекстНовогоПроизвольногоКодаДействия() Экспорт
	
	Возврат
	"Правило действия описывается на языке 1С.
	|Возможно использование шаблонов.
	|
	|Формирование шаблонов возможно двумя способами:
	|- описание кода в справочнике ""Шаблоны действий""
	|- описанием методов в модуле ""осШаблоныДействийПереопределяемый"".
	|Только методы, описанные в режиме конфигуратора могут содержать
	|параметры, доступные в настройке действия.
	|
	|При использовании режима описания действия произвольным кодом, в коде
	|доступна переменная ""ПеременныеОкружения"", типа ""Структура"". 
	|Назначение переменной - кеширование данных при циклическом вызове обрабочика. 
	|Так же переменная обязательно содержит элемент ""МассивСообщений"", в которой
	|находится массив сообщений прочитанной пачки.
	| 
	|Примечание: если в результе обработки происходит исключение,
	| 			 текущий массив сообщений будет повторно получен
	|			 в следующем цикле обработки. В случае успешного
	|			 исполнения кода (без возникновения исключений),
	|			 сообщения будут считаться обработанными.";
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейсДействия

Функция ПолучитьОписаниеОбработчика() Экспорт
	
	ОписаниеОбработчика = Новый Структура;
	ОписаниеОбработчика.Вставить("ПроизвольныйКод","");
	ОписаниеОбработчика.Вставить("РезультирующаяОчередь",Справочники.осОчередиСообщений.ПустаяСсылка());
	ОписаниеОбработчика.Вставить("ОднократноеВыполнение",Ложь);
	ОписаниеОбработчика.Вставить("НастройкиКомпоновкиДанных",Неопределено);
	НастройкаПараметровДействия = Новый ТаблицаЗначений;
	НастройкаПараметровДействия.Колонки.Добавить("Имя");
	НастройкаПараметровДействия.Колонки.Добавить("Значение");
	НастройкаПараметровДействия.Колонки.Добавить("Обязательный");
	ОписаниеОбработчика.Вставить("НастройкаПараметровДействия",НастройкаПараметровДействия);
	
	Возврат ОписаниеОбработчика;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейсВнешниеМетоды

Функция ПолучитьОписаниеВнешнегоМетода(Метод) Экспорт
	
	ОписаниеМетода = Новый Структура;
	ОписаниеМетода.Вставить("Метод",Метод);
	
	Если Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ПроверитьПодключение Тогда
		
		//Параметры HTTP метода отсутствуют
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ПолучитьОчереди Тогда
		
		//Параметры HTTP метода отсутствуют
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ПолучитьМассивРазделовОчереди Тогда
		
		ОписаниеМетода.Вставить("Очередь","");
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ОтправитьСообщение Тогда
		
		ОписаниеМетода.Вставить("Очередь","");
		ОписаниеМетода.Вставить("Сообщение","");
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ОтправитьМассивСообщений Тогда
		
		ОписаниеМетода.Вставить("Очередь","");
		ОписаниеМетода.Вставить("МассивСообщений",Новый Массив);	
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ОтправитьСообщениеВРаздел Тогда
		
		ОписаниеМетода.Вставить("Очередь","");
		ОписаниеМетода.Вставить("Раздел","");
		ОписаниеМетода.Вставить("Сообщение","");
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ЗарегистрироватьПодписчикаВГруппе Тогда
		
		ОписаниеМетода.Вставить("Группа","");
		ОписаниеМетода.Вставить("Подписчик","");
		ОписаниеМетода.Вставить("РежимПодтвержденияСообщений",Перечисления.осРежимыПодтвержденияСообщений.Ручной);
		ОписаниеМетода.Вставить("РежимОбработкиОшибкиСмещения",Перечисления.осРежимыОбработкиОшибкиСмещения.ВызватьИсключение);
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.УдалитьПодписчикаИзГруппы Тогда
		
		ОписаниеМетода.Вставить("Группа","");
		ОписаниеМетода.Вставить("Подписчик","");
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.НазначитьРазделыПодписчику Тогда
		
		ОписаниеМетода.Вставить("Группа","");
		ОписаниеМетода.Вставить("Подписчик","");
		ТаблицаРазделов = Новый ТаблицаЗначений;
		ТаблицаРазделов.Колонки.Добавить("Очередь", Новый ОписаниеТипов("Строка"));
		ТаблицаРазделов.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Число"));
		ОписаниеМетода.Вставить("ТаблицаРазделов", ТаблицаРазделов);
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ПолучитьСписокРазделовПодписчика Тогда
		
		ОписаниеМетода.Вставить("Группа","");
		ОписаниеМетода.Вставить("Подписчик","");
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ЗафиксироватьСмещения Тогда
		
		ОписаниеМетода.Вставить("Группа","");
		ОписаниеМетода.Вставить("Подписчик","");
		ТаблицаСмещений = Новый ТаблицаЗначений;
		ТаблицаСмещений.Колонки.Добавить("Очередь", Новый ОписаниеТипов("Строка"));
		ТаблицаСмещений.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Число"));
		ТаблицаСмещений.Колонки.Добавить("Смещение", Новый ОписаниеТипов("Число"));
		ОписаниеМетода.Вставить("ТаблицаСмещений",ТаблицаСмещений);
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ПолучитьСмещенияПодписчика Тогда 
		
		ОписаниеМетода.Вставить("Группа","");
		ОписаниеМетода.Вставить("Подписчик","");
		ТаблицаРазделов = Новый ТаблицаЗначений;
		ТаблицаРазделов.Колонки.Добавить("Очередь", Новый ОписаниеТипов("Строка"));
		ТаблицаРазделов.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Число"));
		ОписаниеМетода.Вставить("ТаблицаРазделов", ТаблицаРазделов);
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ЗарегистрироватьПодписчикаВОчереди Тогда
		
		ОписаниеМетода.Вставить("Группа","");
		ОписаниеМетода.Вставить("Подписчик","");
		ОписаниеМетода.Вставить("Очередь","");
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ПолучитьСписокОчередейПодписчика Тогда
		
		ОписаниеМетода.Вставить("Группа","");
		ОписаниеМетода.Вставить("Подписчик","");
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.УдалитьПодписчикаИзОчередей Тогда
		
		ОписаниеМетода.Вставить("Группа","");
		ОписаниеМетода.Вставить("Подписчик","");
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ПрочитатьСообщения Тогда
		
		ОписаниеМетода.Вставить("Группа","");
		ОписаниеМетода.Вставить("Подписчик","");
		ОписаниеМетода.Вставить("РазмерПачки",0);
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.НайтиНачальныеСмещенияРазделов Тогда 
		
		ОписаниеМетода.Вставить("Группа","");
		ОписаниеМетода.Вставить("Подписчик","");
		ТаблицаРазделов = Новый ТаблицаЗначений;
		ТаблицаРазделов.Колонки.Добавить("Очередь", Новый ОписаниеТипов("Строка"));
		ТаблицаРазделов.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Число"));
		ОписаниеМетода.Вставить("ТаблицаРазделов", ТаблицаРазделов);
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.НайтиКонечныеСмещенияРазделов Тогда 
		
		ОписаниеМетода.Вставить("Группа","");
		ОписаниеМетода.Вставить("Подписчик","");
		ТаблицаРазделов = Новый ТаблицаЗначений;
		ТаблицаРазделов.Колонки.Добавить("Очередь", Новый ОписаниеТипов("Строка"));
		ТаблицаРазделов.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Число"));
		ОписаниеМетода.Вставить("ТаблицаРазделов", ТаблицаРазделов);
		
	КонецЕсли;
	
	Возврат ОписаниеМетода;
	
КонецФункции

Функция ВыполнитьВнешнийМетод(ОписаниеМетода, Соединение) Экспорт
	
	ОписаниеМетода = ЗаполнитьСвойстваВнешнегоМетода(ОписаниеМетода);
	СвойстваМетода = ОписаниеМетода.СвойстваМетода;
	
	Запрос = Новый HTTPЗапрос(СвойстваМетода.АдресРесурса, СвойстваМетода.Заголовки);
	Запрос.УстановитьТелоИзСтроки(СвойстваМетода.ТелоСообщения, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	
	Попытка
		РезультатВыполненияЗапроса = Соединение.ВызватьHTTPМетод(СвойстваМетода.ИмяМетода, Запрос);
	Исключение
		РезультатВыполненияМетода = ПолучитьОписаниеРезультатаВыполненияВнешнегоМетода();
		РезультатВыполненияМетода.КодОшибки = 522;
		РезультатВыполненияМетода.Данные = Неопределено;
		РезультатВыполненияМетода.ОписаниеОшибки = ОчиститьСообщениеОбОшибкеОтНезначащейИнформации(ОписаниеОшибки());
		Возврат РезультатВыполненияМетода;
	КонецПопытки;
	
	РезультатВыполненияМетода = ОбработатьРезультатВыполненияВнешнегоЗапроса(ОписаниеМетода.Метод, РезультатВыполненияЗапроса);
	
	Возврат РезультатВыполненияМетода;
	
КонецФункции

Функция ЗаполнитьСвойстваВнешнегоМетода(ОписаниеМетода)
	
	Метод = ОписаниеМетода.Метод;
	
	Если Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ПроверитьПодключение Тогда
		
		ИмяМетода = "GET";
		
		АдресРесурса = "";
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Accept", "application/vnd.kafka.v2+json");
		Заголовки.Вставить("Content-Type", "application/vnd.kafka.v2+json");
		
		ТелоСообщения = "";
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ПолучитьОчереди Тогда
		
		ИмяМетода = "GET";
		
		АдресРесурса = "/topics";
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Accept", "application/vnd.kafka.v2+json");
		Заголовки.Вставить("Content-Type", "application/vnd.kafka.v2+json");
		
		ТелоСообщения = "";
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ПолучитьМассивРазделовОчереди Тогда
		
		ИмяМетода = "GET";
		
		АдресРесурса = "/topics/%1";
		АдресРесурса = СтрЗаменить(АдресРесурса, "%1", ОписаниеМетода.Очередь);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Accept", "application/vnd.kafka.v2+json");
		Заголовки.Вставить("Content-Type", "application/vnd.kafka.v2+json");
		
		ТелоСообщения = "";
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ОтправитьСообщение Тогда
		
		ИмяМетода = "POST";
		
		АдресРесурса = "/topics/%1";
		АдресРесурса = СтрЗаменить(АдресРесурса, "%1", ОписаниеМетода.Очередь);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/vnd.kafka.json.v2+json");
		Заголовки.Вставить("Accept", "application/vnd.kafka.v2+json");
		
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку();
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("records");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("value");
		ЗаписьJSON.ЗаписатьЗначение(ОписаниеМетода.Сообщение);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		ЗаписьJSON.ЗаписатьКонецМассива();
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		ТелоСообщения = ЗаписьJSON.Закрыть();
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ОтправитьМассивСообщений Тогда
		
		ИмяМетода = "POST";
		
		АдресРесурсаШаблон = "/topics/%1";
		АдресРесурса = СтрШаблон(АдресРесурсаШаблон, ОписаниеМетода.Очередь);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/vnd.kafka.json.v2+json");
		Заголовки.Вставить("Accept", "application/vnd.kafka.v2+json");
		
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку();
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("records");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Для Каждого Сообщение Из ОписаниеМетода.МассивСообщений Цикл 
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			ЗаписьJSON.ЗаписатьИмяСвойства("value");
			ЗаписьJSON.ЗаписатьЗначение(Сообщение);
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецМассива();
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		ТелоСообщения = ЗаписьJSON.Закрыть();
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ОтправитьСообщениеВРаздел Тогда
		
		ИмяМетода = "POST";
		
		АдресРесурса = "/topics/%1/partitions/%2";
		АдресРесурса = СтрЗаменить(АдресРесурса, "%1", ОписаниеМетода.Очередь);
		АдресРесурса = СтрЗаменить(АдресРесурса, "%2", ОписаниеМетода.Раздел);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/vnd.kafka.json.v2+json");
		Заголовки.Вставить("Accept", "application/vnd.kafka.v2+json");
		
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку();
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("records");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("value");
		ЗаписьJSON.ЗаписатьЗначение(ОписаниеМетода.Сообщение);
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		ЗаписьJSON.ЗаписатьКонецМассива();
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		ТелоСообщения = ЗаписьJSON.Закрыть();
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ЗарегистрироватьПодписчикаВГруппе Тогда
		
		ИмяМетода = "POST";
		
		АдресРесурса = "/consumers/%1";
		АдресРесурса = СтрЗаменить(АдресРесурса, "%1", ОписаниеМетода.Группа);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/vnd.kafka.json.v2+json");
		
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку();
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("name");
		ЗаписьJSON.ЗаписатьЗначение(ОписаниеМетода.Подписчик);
		ЗаписьJSON.ЗаписатьИмяСвойства("format");
		ЗаписьJSON.ЗаписатьЗначение("json");
		ЗаписьJSON.ЗаписатьИмяСвойства("auto.offset.reset");
		ЗаписьJSON.ЗаписатьЗначение(
				ПолучитьРежимОбработкиОшибкиСмещенияВНотацииСлужбыСообщений(ОписаниеМетода.РежимОбработкиОшибкиСмещения));
		ЗаписьJSON.ЗаписатьИмяСвойства("auto.commit.enable");
		ЗаписьJSON.ЗаписатьЗначение(
				ПолучитьРежимПодтвержденияСообщенийВНотацииСлужбыСообщений(ОписаниеМетода.РежимПодтвержденияСообщений));
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		ТелоСообщения = ЗаписьJSON.Закрыть();
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.УдалитьПодписчикаИзГруппы Тогда
		
		ИмяМетода = "DELETE";
		
		АдресРесурса = "/consumers/%1/instances/%2";
		АдресРесурса = СтрЗаменить(АдресРесурса, "%1", ОписаниеМетода.Группа);
		АдресРесурса = СтрЗаменить(АдресРесурса, "%2", ОписаниеМетода.Подписчик);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/vnd.kafka.json.v2+json");
		
		ТелоСообщения = "";
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.НазначитьРазделыПодписчику Тогда
		
		ИмяМетода = "POST";
		
		АдресРесурса = "/consumers/%1/instances/%2/assignments";
		АдресРесурса = СтрШаблон(АдресРесурса, ОписаниеМетода.Группа, ОписаниеМетода.Подписчик);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/vnd.kafka.json.v2+json");
		
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку();
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("partitions");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Для Каждого Строка Из ОписаниеМетода.ТаблицаРазделов Цикл
			ЗаписьJSON.ЗаписатьНачалоОбъекта();	
			ЗаписьJSON.ЗаписатьИмяСвойства("topic");
			ЗаписьJSON.ЗаписатьЗначение(Строка.Очередь);
			ЗаписьJSON.ЗаписатьИмяСвойства("partition");
			ЗаписьJSON.ЗаписатьЗначение(Строка.Раздел);
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЦикла; 
		ЗаписьJSON.ЗаписатьКонецМассива();
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		ТелоСообщения = ЗаписьJSON.Закрыть();
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ПолучитьСписокРазделовПодписчика Тогда
		
		ИмяМетода = "GET";
		
		АдресРесурса = "/consumers/%1/instances/%2/assignments";
		АдресРесурса = СтрШаблон(АдресРесурса, ОписаниеМетода.Группа, ОписаниеМетода.Подписчик);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/vnd.kafka.json.v2+json");
		
		ТелоСообщения = "";
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ЗафиксироватьСмещения Тогда
		
		ИмяМетода = "POST";
		
		АдресРесурса = "/consumers/%1/instances/%2/offsets";
		АдресРесурса = СтрЗаменить(АдресРесурса, "%1", ОписаниеМетода.Группа);
		АдресРесурса = СтрЗаменить(АдресРесурса, "%2", ОписаниеМетода.Подписчик);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/vnd.kafka.v2+json");
		
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку();
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("offsets");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Для Каждого Элемент Из ОписаниеМетода.ТаблицаСмещений Цикл
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			ЗаписьJSON.ЗаписатьИмяСвойства("topic");
			ЗаписьJSON.ЗаписатьЗначение(Элемент.Очередь);
			ЗаписьJSON.ЗаписатьИмяСвойства("partition");
			ЗаписьJSON.ЗаписатьЗначение(Элемент.Раздел);
			ЗаписьJSON.ЗаписатьИмяСвойства("offset");
			ЗаписьJSON.ЗаписатьЗначение(Элемент.Смещение);
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецМассива();
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		ТелоСообщения = ЗаписьJSON.Закрыть();
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ПолучитьСмещенияПодписчика Тогда
		
		ИмяМетода = "GET";
		
		АдресРесурса = "/consumers/%1/instances/%2/offsets";
		АдресРесурса = СтрШаблон(АдресРесурса, ОписаниеМетода.Группа, ОписаниеМетода.Подписчик);
		
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку();
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("partitions");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Для Каждого Элемент Из ОписаниеМетода.ТаблицаРазделов Цикл
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			ЗаписьJSON.ЗаписатьИмяСвойства("topic");
			ЗаписьJSON.ЗаписатьЗначение(Элемент.Очередь);
			ЗаписьJSON.ЗаписатьИмяСвойства("partition");
			ЗаписьJSON.ЗаписатьЗначение(Элемент.Раздел);
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецМассива();
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		ТелоСообщения = ЗаписьJSON.Закрыть();
				
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/vnd.kafka.v2+json");
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ЗарегистрироватьПодписчикаВОчереди Тогда
		
		ИмяМетода = "POST";
		
		АдресРесурса = "/consumers/%1/instances/%2/subscription";
		АдресРесурса = СтрЗаменить(АдресРесурса, "%1", ОписаниеМетода.Группа);
		АдресРесурса = СтрЗаменить(АдресРесурса, "%2", ОписаниеМетода.Подписчик);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/vnd.kafka.v2+json");
		
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку();
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("topics");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		ЗаписьJSON.ЗаписатьЗначение(ОписаниеМетода.Очередь);
		ЗаписьJSON.ЗаписатьКонецМассива();
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		ТелоСообщения = ЗаписьJSON.Закрыть();
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ПолучитьСписокОчередейПодписчика Тогда
		
		ИмяМетода = "GET";
		
		АдресРесурса = "/consumers/%1/instances/%2/subscription";
		АдресРесурса = СтрЗаменить(АдресРесурса, "%1", ОписаниеМетода.Группа);
		АдресРесурса = СтрЗаменить(АдресРесурса, "%2", ОписаниеМетода.Подписчик);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/vnd.kafka.v2+json");
		
		ТелоСообщения = "";
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.УдалитьПодписчикаИзОчередей Тогда
		
		ИмяМетода = "DELETE";
		
		АдресРесурса = "/consumers/%1/instances/%2/subscription";
		АдресРесурса = СтрЗаменить(АдресРесурса, "%1", ОписаниеМетода.Группа);
		АдресРесурса = СтрЗаменить(АдресРесурса, "%2", ОписаниеМетода.Подписчик);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/vnd.kafka.v2+json");
		
		ТелоСообщения = "";
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ПрочитатьСообщения Тогда
		
		ИмяМетода = "GET";
		
		АдресРесурса = "/consumers/%1/instances/%2/records%3";
		АдресРесурса = СтрЗаменить(АдресРесурса, "%1", ОписаниеМетода.Группа);
		АдресРесурса = СтрЗаменить(АдресРесурса, "%2", ОписаниеМетода.Подписчик);
		Если ОписаниеМетода.РазмерПачки > 0 Тогда
			АдресРесурса = СтрЗаменить(АдресРесурса, "%3", "?max_bytes=" + Формат(ОписаниеМетода.РазмерПачки, "ЧН=0; ЧГ="));
		Иначе
			АдресРесурса = СтрЗаменить(АдресРесурса, "%3", "");
		КонецЕсли;
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Accept", "application/vnd.kafka.json.v2+json");
		Заголовки.Вставить("Content-Type", "application/vnd.kafka.v2+json"); 
		
		ТелоСообщения = "";	
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.НайтиНачальныеСмещенияРазделов Тогда
		
		ИмяМетода = "POST";
		
		АдресРесурса = "/consumers/%1/instances/%2/positions/beginning";
		АдресРесурса = СтрШаблон(АдресРесурса, ОписаниеМетода.Группа, ОписаниеМетода.Подписчик);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/vnd.kafka.json.v2+json");
		
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку();
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("partitions");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Для Каждого Строка Из ОписаниеМетода.ТаблицаРазделов Цикл
			ЗаписьJSON.ЗаписатьНачалоОбъекта();	
			ЗаписьJSON.ЗаписатьИмяСвойства("topic");
			ЗаписьJSON.ЗаписатьЗначение(Строка.Очередь);
			ЗаписьJSON.ЗаписатьИмяСвойства("partition");
			ЗаписьJSON.ЗаписатьЗначение(Строка.Раздел);
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЦикла; 
		ЗаписьJSON.ЗаписатьКонецМассива();
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		ТелоСообщения = ЗаписьJSON.Закрыть();
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.НайтиКонечныеСмещенияРазделов Тогда
		
		ИмяМетода = "POST";
		
		АдресРесурса = "/consumers/%1/instances/%2/positions/end";
		АдресРесурса = СтрШаблон(АдресРесурса, ОписаниеМетода.Группа, ОписаниеМетода.Подписчик);
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Content-Type", "application/vnd.kafka.json.v2+json");
		
		ЗаписьJSON = Новый ЗаписьJSON();
		ЗаписьJSON.УстановитьСтроку();
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("partitions");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Для Каждого Строка Из ОписаниеМетода.ТаблицаРазделов Цикл
			ЗаписьJSON.ЗаписатьНачалоОбъекта();	
			ЗаписьJSON.ЗаписатьИмяСвойства("topic");
			ЗаписьJSON.ЗаписатьЗначение(Строка.Очередь);
			ЗаписьJSON.ЗаписатьИмяСвойства("partition");
			ЗаписьJSON.ЗаписатьЗначение(Строка.Раздел);
			ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЦикла; 
		ЗаписьJSON.ЗаписатьКонецМассива();
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		ТелоСообщения = ЗаписьJSON.Закрыть();
	Иначе
		ВызватьИсключение "Неизвестный Внешний метод обмена сообщениями";
	КонецЕсли;
	
	СвойстваМетода = Новый Структура;
	СвойстваМетода.Вставить("ИмяМетода", ИмяМетода);
	СвойстваМетода.Вставить("АдресРесурса", АдресРесурса);
	СвойстваМетода.Вставить("Заголовки", Заголовки);
	СвойстваМетода.Вставить("ТелоСообщения", ТелоСообщения);
	
	ОписаниеМетода.Вставить("СвойстваМетода", СвойстваМетода);
	
	Возврат ОписаниеМетода;
	
КонецФункции

Функция ОбработатьРезультатВыполненияВнешнегоЗапроса(Метод, РезультатЗапроса)
	
	РезультатВыполненияМетода = ПолучитьОписаниеРезультатаВыполненияВнешнегоМетода();
	
	Если Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ПроверитьПодключение Тогда
		
		Если РезультатЗапроса.КодСостояния <> 200 Тогда
			Возврат ОбработатьОшибкуВыполненияВнешнегоЗапроса(РезультатЗапроса, РезультатВыполненияМетода);
		КонецЕсли;
		
		РезультатВыполненияМетода.Данные = Истина;
		Возврат РезультатВыполненияМетода;
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ПолучитьОчереди Тогда
		
		Если РезультатЗапроса.КодСостояния <> 200 Тогда
			Возврат ОбработатьОшибкуВыполненияВнешнегоЗапроса(РезультатЗапроса, РезультатВыполненияМетода);
		КонецЕсли; 		
		
		РезультатВыполненияМетода.Данные = РазобратьСтрокуJSON(РезультатЗапроса.ПолучитьТелоКакСтроку());	
		Возврат РезультатВыполненияМетода;
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ПолучитьМассивРазделовОчереди Тогда
		
		Если РезультатЗапроса.КодСостояния <> 200 Тогда
			Возврат ОбработатьОшибкуВыполненияВнешнегоЗапроса(РезультатЗапроса, РезультатВыполненияМетода);
		КонецЕсли;  		
		
		СтруктураДанныхОтвета = РазобратьСтрокуJSON(РезультатЗапроса.ПолучитьТелоКакСтроку(), Истина);
		МассивРазделов = Новый Массив;
		Для Каждого Раздел Из СтруктураДанныхОтвета.Получить("partitions") Цикл
			МассивРазделов.Добавить(Раздел.Получить("partition"));
		КонецЦикла;
		РезультатВыполненияМетода.Данные = МассивРазделов;
		Возврат РезультатВыполненияМетода;
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ОтправитьСообщение Тогда
		
		Если РезультатЗапроса.КодСостояния <> 200 Тогда
			Возврат ОбработатьОшибкуВыполненияВнешнегоЗапроса(РезультатЗапроса, РезультатВыполненияМетода);
		КонецЕсли;   		
		
		СтруктураДанныхОтвета = РазобратьСтрокуJSON(РезультатЗапроса.ПолучитьТелоКакСтроку());
		СтруктураДанных = Новый Структура("Раздел,Смещение,КодОшибкиДанных,ОписаниеОшибкиДанных",СтруктураДанныхОтвета.offsets[0].partition,СтруктураДанныхОтвета.offsets[0].offset,СтруктураДанныхОтвета.offsets[0].error_code,СтруктураДанныхОтвета.offsets[0].error); 
		РезультатВыполненияМетода.Данные = СтруктураДанных;
		Возврат РезультатВыполненияМетода;
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ОтправитьМассивСообщений Тогда
		
		Если РезультатЗапроса.КодСостояния <> 200 Тогда
			Возврат ОбработатьОшибкуВыполненияВнешнегоЗапроса(РезультатЗапроса, РезультатВыполненияМетода);
		КонецЕсли;
		
		ТаблицаЗначений = Новый ТаблицаЗначений();
		ТаблицаЗначений.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаЗначений.Колонки.Добавить("Смещение", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(20,0,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаЗначений.Колонки.Добавить("КодОшибкиДанных", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаЗначений.Колонки.Добавить("ОписаниеОшибкиДанных", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(0,ДопустимаяДлина.Переменная)));
		
		СтруктураДанныхОтвета = РазобратьСтрокуJSON(РезультатЗапроса.ПолучитьТелоКакСтроку());
		Для Каждого ДанныеОтвета Из СтруктураДанныхОтвета.offsets Цикл 
			СтрокаТЗ = ТаблицаЗначений.Добавить();
			СтрокаТЗ.Раздел = ДанныеОтвета.partition;
			СтрокаТЗ.Смещение = ДанныеОтвета.offset;
			СтрокаТЗ.КодОшибкиДанных = ?(ДанныеОтвета.Свойство("error_code"),ДанныеОтвета.error_code,0);
			СтрокаТЗ.ОписаниеОшибкиДанных = ?(ДанныеОтвета.Свойство("error"),ДанныеОтвета.error,"");
		КонецЦикла;	  		
		
		РезультатВыполненияМетода.Данные = ТаблицаЗначений;		
		Возврат РезультатВыполненияМетода;
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ОтправитьСообщениеВРаздел Тогда
		
		Если РезультатЗапроса.КодСостояния <> 200 Тогда
			Возврат ОбработатьОшибкуВыполненияВнешнегоЗапроса(РезультатЗапроса, РезультатВыполненияМетода);
		КонецЕсли;
		
		СтруктураДанныхОтвета = РазобратьСтрокуJSON(РезультатЗапроса.ПолучитьТелоКакСтроку());
		СтруктураДанных = Новый Структура("Смещение,КодОшибкиДанных,ОписаниеОшибкиДанных",СтруктураДанныхОтвета.offsets[0].offset,СтруктураДанныхОтвета.offsets[0].error_code,СтруктураДанныхОтвета.offsets[0].error); 
		РезультатВыполненияМетода.Данные = СтруктураДанных;
		Возврат РезультатВыполненияМетода;
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ЗарегистрироватьПодписчикаВГруппе Тогда
		
		Если РезультатЗапроса.КодСостояния <> 200 Тогда
			Возврат ОбработатьОшибкуВыполненияВнешнегоЗапроса(РезультатЗапроса, РезультатВыполненияМетода);
		КонецЕсли;
		
		РезультатВыполненияМетода.Данные = Истина;
		Возврат РезультатВыполненияМетода;
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.УдалитьПодписчикаИзГруппы Тогда
		
		Если РезультатЗапроса.КодСостояния <> 204 Тогда
			Возврат ОбработатьОшибкуВыполненияВнешнегоЗапроса(РезультатЗапроса, РезультатВыполненияМетода);
		КонецЕсли;
		
		РезультатВыполненияМетода.Данные = Истина;
		Возврат РезультатВыполненияМетода;
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.НазначитьРазделыПодписчику Тогда
		
		Если РезультатЗапроса.КодСостояния <> 204 Тогда
			Возврат ОбработатьОшибкуВыполненияВнешнегоЗапроса(РезультатЗапроса, РезультатВыполненияМетода);
		КонецЕсли;
		
		РезультатВыполненияМетода.Данные = Истина;
		Возврат РезультатВыполненияМетода; 
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ПолучитьСписокРазделовПодписчика Тогда
		
		Если РезультатЗапроса.КодСостояния <> 200 Тогда
			Возврат ОбработатьОшибкуВыполненияВнешнегоЗапроса(РезультатЗапроса, РезультатВыполненияМетода);
		КонецЕсли;
		
		СтруктураДанных = РазобратьСтрокуJSON(РезультатЗапроса.ПолучитьТелоКакСтроку());			
		ТаблицаЗначений = Новый ТаблицаЗначений();
		ТаблицаЗначений.Колонки.Добавить("Очередь", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(249,ДопустимаяДлина.Переменная)));
		ТаблицаЗначений.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
		Если СтруктураДанных.Свойство("partitions") И ТипЗнч(СтруктураДанных.partitions) = Тип("Массив") И СтруктураДанных.partitions.Количество() Тогда
			Для Каждого Элемент Из СтруктураДанных.partitions Цикл
				Строка = ТаблицаЗначений.Добавить();
				Строка.Очередь = Элемент.topic;
				Строка.Раздел = Число(Элемент.partition);		
			КонецЦикла;			
		КонецЕсли;
		
		РезультатВыполненияМетода.Данные = ТаблицаЗначений;
		Возврат РезультатВыполненияМетода;
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ЗарегистрироватьПодписчикаВОчереди Тогда
		
		Если РезультатЗапроса.КодСостояния <> 204 Тогда
			Возврат ОбработатьОшибкуВыполненияВнешнегоЗапроса(РезультатЗапроса, РезультатВыполненияМетода);
		КонецЕсли;
		
		РезультатВыполненияМетода.Данные = Истина;
		Возврат РезультатВыполненияМетода;
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.УдалитьПодписчикаИзОчередей Тогда
		
		Если РезультатЗапроса.КодСостояния <> 204 Тогда
			Возврат ОбработатьОшибкуВыполненияВнешнегоЗапроса(РезультатЗапроса, РезультатВыполненияМетода);
		КонецЕсли;
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ПолучитьСписокОчередейПодписчика Тогда
		
		Если РезультатЗапроса.КодСостояния <> 200 Тогда
			Возврат ОбработатьОшибкуВыполненияВнешнегоЗапроса(РезультатЗапроса, РезультатВыполненияМетода);
		КонецЕсли;
		
		СтруктураДанных = РазобратьСтрокуJSON(РезультатЗапроса.ПолучитьТелоКакСтроку());
		РезультатВыполненияМетода.Данные = СтруктураДанных.topics;
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ПрочитатьСообщения Тогда
		
		Если РезультатЗапроса.КодСостояния <> 200 Тогда
			Возврат ОбработатьОшибкуВыполненияВнешнегоЗапроса(РезультатЗапроса, РезультатВыполненияМетода);
		КонецЕсли;   		
		
		СтруктураДанных = РазобратьСтрокуJSON(РезультатЗапроса.ПолучитьТелоКакСтроку());			
		ТаблицаЗначений = Новый ТаблицаЗначений();
		ТаблицаЗначений.Колонки.Добавить("Очередь", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(249,ДопустимаяДлина.Переменная)));
		ТаблицаЗначений.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаЗначений.Колонки.Добавить("Смещение", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(20,0,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаЗначений.Колонки.Добавить("Сообщение", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(0,ДопустимаяДлина.Переменная)));
		Если СтруктураДанных.Количество() Тогда
			Для Каждого Элемент Из СтруктураДанных Цикл
				Строка = ТаблицаЗначений.Добавить();
				Строка.Очередь = Элемент.topic;
				Строка.Раздел = Число(Элемент.partition);
				Строка.Смещение = Число(Элемент.offset);
				Строка.Сообщение = Элемент.value;				
			КонецЦикла;
		КонецЕсли;
		РезультатВыполненияМетода.Данные = ТаблицаЗначений;
		Возврат РезультатВыполненияМетода;
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ЗафиксироватьСмещения Тогда
		
		Если РезультатЗапроса.КодСостояния <> 200 Тогда
			Возврат ОбработатьОшибкуВыполненияВнешнегоЗапроса(РезультатЗапроса, РезультатВыполненияМетода);
		КонецЕсли;
		
		СтруктураДанных = РазобратьСтрокуJSON(РезультатЗапроса.ПолучитьТелоКакСтроку());			
		ТаблицаЗначений = Новый ТаблицаЗначений();
		ТаблицаЗначений.Колонки.Добавить("Очередь", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(249,ДопустимаяДлина.Переменная)));
		ТаблицаЗначений.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
		ТаблицаЗначений.Колонки.Добавить("Смещение", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(20,0,ДопустимыйЗнак.Неотрицательный)));
		Если СтруктураДанных.Количество() Тогда
			Для Каждого Элемент Из СтруктураДанных Цикл
				Строка = ТаблицаЗначений.Добавить();
				Строка.Очередь = Элемент.topic;
				Строка.Раздел = Число(Элемент.partition);
				Строка.Смещение = Число(Элемент.committed);
			КонецЦикла;
		КонецЕсли;
		
		РезультатВыполненияМетода.Данные = ТаблицаЗначений;
		Возврат РезультатВыполненияМетода;
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.ПолучитьСмещенияПодписчика Тогда
		
		Если РезультатЗапроса.КодСостояния <> 200 Тогда
			Возврат ОбработатьОшибкуВыполненияВнешнегоЗапроса(РезультатЗапроса, РезультатВыполненияМетода);
		КонецЕсли;
		
		РезультатВыполненияМетода.Данные = Истина;
		Возврат РезультатВыполненияМетода;
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.НайтиНачальныеСмещенияРазделов Тогда
		
		Если РезультатЗапроса.КодСостояния <> 204 Тогда
			Возврат ОбработатьОшибкуВыполненияВнешнегоЗапроса(РезультатЗапроса, РезультатВыполненияМетода);
		КонецЕсли;
		
		РезультатВыполненияМетода.Данные = Истина;
		Возврат РезультатВыполненияМетода;
		
	ИначеЕсли Метод = Перечисления.осВнешниеМетодыОбменаСообщениями.НайтиКонечныеСмещенияРазделов Тогда
		
		Если РезультатЗапроса.КодСостояния <> 204 Тогда
			Возврат ОбработатьОшибкуВыполненияВнешнегоЗапроса(РезультатЗапроса, РезультатВыполненияМетода);
		КонецЕсли;
		
		РезультатВыполненияМетода.Данные = Истина;
		Возврат РезультатВыполненияМетода;
		
	КонецЕсли;
	
	Возврат РезультатВыполненияМетода;
	
КонецФункции

Функция ПолучитьРежимОбработкиОшибкиСмещенияВНотацииСлужбыСообщений(РежимОбработкиОшибкиСмещения)
	
	Если РежимОбработкиОшибкиСмещения = Перечисления.осРежимыОбработкиОшибкиСмещения.ВызватьИсключение Тогда
		Возврат "none";
	ИначеЕсли РежимОбработкиОшибкиСмещения = Перечисления.осРежимыОбработкиОшибкиСмещения.УстановитьВНачальное Тогда
		Возврат "earliest";	
	ИначеЕсли РежимОбработкиОшибкиСмещения = Перечисления.осРежимыОбработкиОшибкиСмещения.УстановитьВКонечное Тогда
		Возврат "latest";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРежимПодтвержденияСообщенийВНотацииСлужбыСообщений(РежимПодтвержденияСообщений)
	
	Если РежимПодтвержденияСообщений = Перечисления.осРежимыПодтвержденияСообщений.Ручной Тогда
		Возврат "false";
	ИначеЕсли РежимПодтвержденияСообщений = Перечисления.осРежимыПодтвержденияСообщений.Автоматический Тогда
		Возврат "true";	
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОписаниеРезультатаВыполненияВнешнегоМетода()
	
	ОписаниеРезультата = Новый Структура;
	
	ОписаниеРезультата.Вставить("КодОшибки", Неопределено);
	ОписаниеРезультата.Вставить("ОписаниеОшибки", "");
	ОписаниеРезультата.Вставить("Данные", Неопределено);
	
	Возврат ОписаниеРезультата;
	
КонецФункции

Функция РазобратьСтрокуJSON(СтрокаJSON, ПрочитатьВСоответствие = Ложь)
	
	Попытка	
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(СтрЗаменить(СтрокаJSON, Символы.ПС, ""));
		Данные = ПрочитатьJSON(ЧтениеJSON, ПрочитатьВСоответствие);
		ЧтениеJSON.Закрыть();
		Возврат Данные;
	Исключение	
		Возврат Неопределено;	
	КонецПопытки;
	
КонецФункции

Функция ОбработатьОшибкуВыполненияВнешнегоЗапроса(РезультатЗапроса, РезультатВыполненияМетода)
	
	СтруктураДанных = РазобратьСтрокуJSON(РезультатЗапроса.ПолучитьТелоКакСтроку());
	Если ТипЗнч(СтруктураДанных) = Тип("Структура") И СтруктураДанных.Свойство("error_code") И СтруктураДанных.Свойство("message") Тогда
		РезультатВыполненияМетода.КодОшибки = СтруктураДанных.error_code;
		РезультатВыполненияМетода.ОписаниеОшибки = СтруктураДанных.message;
	Иначе
		РезультатВыполненияМетода.КодОшибки =  РезультатЗапроса.КодСостояния;
		РезультатВыполненияМетода.ОписаниеОшибки = РезультатЗапроса.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	Возврат РезультатВыполненияМетода;	
	
КонецФункции

Функция ОчиститьСообщениеОбОшибкеОтНезначащейИнформации(ОписаниеОшибки)  
	
	ШаблонПоиска = ")}: ";
	ПозицияПоиска = СтрНайти(ОписаниеОшибки, ШаблонПоиска);        
	Если ПозицияПоиска = 0 Тогда 
		Возврат ОписаниеОшибки;
	Иначе  
		ПозицияНачалаИнформации = ПозицияПоиска + СтрДлина(ШаблонПоиска);
		Возврат Прав(ОписаниеОшибки,СтрДлина(ОписаниеОшибки) - ПозицияНачалаИнформации + 1);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьМаксимальныеСмещенияПриПолученииСообщения(Таблица)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаСообщений.Смещение КАК Смещение,
	|	ТаблицаСообщений.Очередь КАК Очередь,
	|	ТаблицаСообщений.Раздел КАК Раздел
	|ПОМЕСТИТЬ ВТ_ПочитанныеСмещения
	|ИЗ
	|	&ТаблицаСообщений КАК ТаблицаСообщений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТ_ПочитанныеСмещения.Смещение) КАК Смещение,
	|	ВТ_ПочитанныеСмещения.Очередь КАК Очередь,
	|	ВТ_ПочитанныеСмещения.Раздел КАК Раздел
	|ИЗ
	|	ВТ_ПочитанныеСмещения КАК ВТ_ПочитанныеСмещения
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПочитанныеСмещения.Раздел,
	|	ВТ_ПочитанныеСмещения.Очередь";
	Запрос.УстановитьПараметр("ТаблицаСообщений",Таблица);
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ВыполнитьРегламентныеОперации() Экспорт
	
	РегламентнаяОперацияОбработатьРегистрСостоянияТранзакций();
		
КонецПроцедуры

Процедура РегламентнаяОперацияОбработатьРегистрСостоянияТранзакций();
		
	//Соединение = осОчередиСообщенийСерверПовтИсп.ПолучитьСоединение();
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	//               |	осОчередиСообщений.Код КАК Код,
	//               |	осОчередиСообщений.Ссылка КАК Ссылка
	//               |ИЗ
	//               |	Справочник.осПравилаОбработки КАК осПравилаОбработки
	//               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.осОчередиСообщений КАК осОчередиСообщений
	//               |		ПО осПравилаОбработки.Очередь = осОчередиСообщений.Ссылка
	//               |ГДЕ
	//               |	осПравилаОбработки.Используется = ИСТИНА";
	//Выборка = Запрос.Выполнить().Выбрать();
	//
	//МассивОчередей = Новый Массив;
	//
	//Пока Выборка.Следующий() Цикл
	//	
	//		ОписаниеВнешнегоМетода = ПолучитьОписаниеВнешнегоМетода(Перечисления.осВнешниеМетодыОбменаСообщениями.ПолучитьМассивРазделовОчереди);
	//		ОписаниеВнешнегоМетода.Очередь = Результат.Код;
	//		РезультатВыполненияВнешнегоМетода = ВыполнитьВнешнийМетод(ОписаниеМетода, Соединение);
	//		Если РезультатВыполненияВнешнегоМетода.КодОшибки <> Неопределено Тогда
	//			Возврат;
	//		КонецЕсли;
	//		
	//		Пока РезультатВыполненияВнешнегоМетода
	//					
	//КонецЦикла;			
	//	
	//	
	//	
	
КонецПроцедуры

Процедура ОбработатьОчередиСообщений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	осПравилаОбработки.Код КАК КодПравила,
	               |	осПравилаОбработки.Очередь.Код КАК КодОчереди,
	               |	осПравилаОбработки.Очередь.РазмерПачки КАК РазмерПачки,
	               |	осПравилаОбработки.ТипОбработчика КАК ТипОбработчика,
	               |	осПравилаОбработки.Обработчик КАК Обработчик,
	               |	осПравилаОбработки.ОднократноеВыполнение КАК ОднократноеВыполнение,
	               |	осПравилаОбработки.РезультирующаяОчередь.Код КАК КодРезультирующейОчереди
	               |ИЗ
	               |	Справочник.осПравилаОбработки КАК осПравилаОбработки
	               |ГДЕ
	               |	осПравилаОбработки.Используется = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	КешПотоковОчередей = Новый Соответствие;
	
	Соединение = осОчередиСообщенийСерверПовтИсп.ПолучитьСоединение();
	
	Пока Выборка.Следующий() Цикл
				
		МассивПотоковОбработкиОчереди = КешПотоковОчередей.Получить(Выборка.КодОчереди);
		Если МассивПотоковОбработкиОчереди = Неопределено Тогда
			ОписаниеВнешнегоМетода = ПолучитьОписаниеВнешнегоМетода(Перечисления.осВнешниеМетодыОбменаСообщениями.ПолучитьМассивРазделовОчереди);
			ОписаниеВнешнегоМетода.Очередь = Выборка.КодОчереди;
			РезультатВыполненияВнешнегоМетода = ВыполнитьВнешнийМетод(ОписаниеВнешнегоМетода,Соединение);
			Если РезультатВыполненияВнешнегоМетода.Данные <> Неопределено Тогда
				МассивПотоковОбработкиОчереди = РезультатВыполненияВнешнегоМетода.Данные;
				КешПотоковОчередей.Вставить(Выборка.КодОчереди,РезультатВыполненияВнешнегоМетода.Данные);
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыПотока = Новый Структура;
		ПараметрыПотока.Вставить("КодПравила",Выборка.КодПравила);
		ПараметрыПотока.Вставить("КодОчереди",Выборка.КодОчереди);
		ПараметрыПотока.Вставить("РазмерПачки",Выборка.РазмерПачки);
		ПараметрыПотока.Вставить("ТипОбработчика",Выборка.ТипОбработчика);
		ПараметрыПотока.Вставить("КодРезультирующейОчереди",Выборка.КодРезультирующейОчереди);
		ПараметрыПотока.Вставить("ОднократноеВыполнение",Выборка.ОднократноеВыполнение);
		Обработчик = Выборка.Обработчик.Получить();
		ПараметрыПотока.Вставить("Обработчик",Обработчик);
		ПараметрыПотока.Вставить("ТаблицаСмещений",Новый ТаблицаЗначений);
		ПараметрыПотока.Вставить("МассивСообщений",Новый Массив);
		ПараметрыПотока.Вставить("ПеременныеОкружения", Новый Структура);
						
		ПараметрыФоновогоЗадания = Новый Массив;
		ПараметрыФоновогоЗадания.Добавить(ПараметрыПотока);
				
		Для Каждого ПотокОбработки Из МассивПотоковОбработкиОчереди Цикл
					
			ТаблицаРазделов = Новый ТаблицаЗначений;
			ТаблицаРазделов.Колонки.Добавить("Очередь", Новый ОписаниеТипов("Строка"));
			ТаблицаРазделов.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Число"));
			СтрокаТаблицыРазделов = ТаблицаРазделов.Добавить();
			СтрокаТаблицыРазделов.Очередь = Выборка.КодОчереди;
			СтрокаТаблицыРазделов.Раздел = ПотокОбработки;
			ПараметрыФоновогоЗадания[0].Вставить("ТаблицаРазделов",ТаблицаРазделов);
						
			КодПодписчика = ПолучитьИмяПодписчика(Выборка.КодПравила, ПотокОбработки);
			ПараметрыФоновогоЗадания[0].Вставить("КодПодписчика",КодПодписчика);
			ПараметрыФоновогоЗадания[0].Вставить("КодЭкземпляраПотока",Новый УникальныйИдентификатор);
								
			Попытка
				ФоновыеЗадания.Выполнить("осОчередиСообщенийСервер.ОбработатьРазделОчередиСообщений",ПараметрыФоновогоЗадания,КодПодписчика);
			Исключение
				Продолжить;
			КонецПопытки;		
							
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьРазделОчередиСообщений(Знач ПараметрыПотока) Экспорт
	
	Соединение = осОчередиСообщенийСерверПовтИсп.ПолучитьСоединение();
	
	Результат = ОбработкаПотокаЗавершитьПрерваннуюТранзакцию(ПараметрыПотока, Соединение);
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
		    	    	
	ОбработкаПотокаНачатьТранзакцию(ПараметрыПотока);
	
	Пока Истина Цикл
			
		Результат = ОбработкаСобытийПрочитатьСообщения(ПараметрыПотока, Соединение);	
		Если Результат.Данные = Неопределено Тогда
			Если Результат.КодОшибки = 40403 Тогда
				Возврат;
			Иначе
				ЗарегистрироватьОшибку(Результат, ПараметрыПотока);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаСообщений = Результат.Данные;
		КоличествоСтрокТаблицыСообщений = ТаблицаСообщений.Количество();
		Если НЕ КоличествоСтрокТаблицыСообщений Тогда
			Прервать;
		КонецЕсли;
		
		ОтборТекущейОчереди = Новый Структура;
		ОтборТекущейОчереди.Вставить("Очередь",ПараметрыПотока.КодОчереди);
		ВыборкаТекущейОчереди = ТаблицаСообщений.НайтиСтроки(ОтборТекущейОчереди);
		Если ВыборкаТекущейОчереди.Количество() <> КоличествоСтрокТаблицыСообщений Тогда
			ОписаниеОшибки = "Ошибка чтения сообщений. Получены данные более чем одной очереди.";
			ЗарегистрироватьОшибку(Результат, ПараметрыПотока);
			Возврат;
		КонецЕсли;
		
		ПараметрыПотока.МассивСообщений = ТаблицаСообщений.ВыгрузитьКолонку("Сообщение");
		ПараметрыПотока.ТаблицаСмещений = ПолучитьМаксимальныеСмещенияПриПолученииСообщения(ТаблицаСообщений);
				
		Если ПараметрыПотока.ТипОбработчика = Перечисления.осТипыФильтров.ПроизвольныйКод Тогда
			Результат = ВыполнитьФильтрациюПроизвольнымКодом(ПараметрыПотока, Соединение);
	//	ИначеЕсли СистемныеПараметры.ТипОбработчика = Перечисления.осТипыФильтров.СКД Тогда 
	//		Результат = ВыполнитьФильтрациюСхемойКомпоновкиДаннных(СистемныеПараметры, ПараметрыОбработчика, Результат.Данные, Соединение);
		ИначеЕсли ПараметрыПотока.ТипОбработчика = Перечисления.осТипыФильтров.НеФильтровать Тогда 
			Результат = ВыполнитьФильтрациюНеФильтровать(ПараметрыПотока, Соединение);
		ИначеЕсли ПараметрыПотока.ТипОбработчика = Перечисления.осТипыДействий.ПроизвольныйКод Тогда 
			Результат = ВыполнитьДействиеПроизвольнымКодом(ПараметрыПотока, Соединение);
	//	ИначеЕсли СистемныеПараметры.ТипОбработчика = Перечисления.осТипыДействий.Предопределенный Тогда 
	//		Результат = ВыполнитьПредопределенноеДействие(СистемныеПараметры, ПараметрыОбработчика, Результат.Данные);
		Иначе
			Возврат;
		КонецЕсли;
		
		Если НЕ Результат Тогда
			Возврат;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработкаПотокаЗафиксироватьТранзакцию(ПараметрыПотока);
	
КонецПроцедуры

Функция ВыполнитьФильтрациюПроизвольнымКодом(ПараметрыПотока, Соединение)
	
	ПеременныеОкружения = ПараметрыПотока.ПеременныеОкружения;
	ПеременныеОкружения.Вставить("МассивСообщений", ПараметрыПотока.МассивСообщений);
	                                                  
	Результат = ВыполнитьПроизвольныйКод(ПараметрыПотока.Обработчик.ПроизвольныйКод, ПеременныеОкружения);
	
	Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		ОписаниеОшибки = СтрШаблон("Ошибка обработки сообщений. %1",Результат.ОписаниеОшибки);
		ЗарегистрироватьОшибку(ОписаниеОшибки, ПараметрыПотока);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Результат.ПеременныеОкружения) <> Тип("Структура") Тогда
		ОписаниеОшибки = "Ошибка обработки сообщений. Переменные окружения не являются структурой.";
		ЗарегистрироватьОшибку(ОписаниеОшибки, ПараметрыПотока);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Результат.ПеременныеОкружения.Свойство("МассивСообщений") Тогда
		ОписаниеОшибки = "Ошибка обработки сообщений. Переменные окружения не содержат массив сообщений.";
		ЗарегистрироватьОшибку(ОписаниеОшибки, ПараметрыПотока);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Результат.ПеременныеОкружения.МассивСообщений) <> Тип("Массив") Тогда
		ОписаниеОшибки = "Ошибка обработки сообщений. В результате выполнения метода ожидался массив сообщений.";
		ЗарегистрироватьОшибку(ОписаниеОшибки, ПараметрыПотока);
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Элемент Из Результат.ПеременныеОкружения.МассивСообщений Цикл
		Если ПеременныеОкружения.МассивСообщений.Найти(Элемент) = Неопределено Тогда
			ОписаниеОшибки = СтрШаблон("Ошибка обработки сообщений. Сообщение не содержалось в исходных данных:
			|%1",Элемент);
			ЗарегистрироватьОшибку(ОписаниеОшибки, ПараметрыПотока);
			Возврат Ложь;
		КонецЕсли
	КонецЦикла;
	
	ПараметрыПотока.ПеременныеОкружения = ПеременныеОкружения;
	ПараметрыПотока.МассивСообщений = ПеременныеОкружения.МассивСообщений;
	
	Возврат ОбработкаПотокаЗавершитьИтерацию(ПараметрыПотока, Соединение);
		
КонецФункции

Функция ВыполнитьФильтрациюСхемойКомпоновкиДаннных(СистемныеПараметры, ПараметрыОбработчика, ТаблицаСообщений, Соединение)
	
	ЗаписьЖурналаРегистрации(СтрШаблон("Фильтрация схемой компоновки данных для очереди %1",СистемныеПараметры.КодПодписчика),УровеньЖурналаРегистрации.Ошибка);
	
КонецФункции

Функция ВыполнитьФильтрациюНеФильтровать(ПараметрыПотока, Соединение)
	
	Возврат ОбработкаПотокаЗавершитьИтерацию(ПараметрыПотока, Соединение);

КонецФункции

Функция ВыполнитьДействиеПроизвольнымКодом(ПараметрыПотока, Соединение)
		
	ПеременныеОкружения = ПараметрыПотока.ПеременныеОкружения;
	ПеременныеОкружения.Вставить("МассивСообщений", ПараметрыПотока.МассивСообщений);

	Результат = ВыполнитьПроизвольныйКод(ПараметрыПотока.Обработчик.ПроизвольныйКод, ПеременныеОкружения);
	
	Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		ОписаниеОшибки = СтрШаблон("Ошибка обработки сообщений. %1",Результат.ОписаниеОшибки);
		ЗарегистрироватьОшибку(ОписаниеОшибки, ПараметрыПотока);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Результат.ПеременныеОкружения) <> Тип("Структура") Тогда
		ОписаниеОшибки = "Ошибка обработки сообщений. Переменные окружения не являются структурой.";
		ЗарегистрироватьОшибку(ОписаниеОшибки, ПараметрыПотока);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Результат.ПеременныеОкружения.Свойство("МассивСообщений") Тогда
		ОписаниеОшибки = "Ошибка обработки сообщений. Переменные окружения не содержат массив сообщений.";
		ЗарегистрироватьОшибку(ОписаниеОшибки, ПараметрыПотока);
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Результат.ПеременныеОкружения.МассивСообщений) <> Тип("Массив") Тогда
		ОписаниеОшибки = "Ошибка обработки сообщений. В результате выполнения метода ожидался массив сообщений.";
		ЗарегистрироватьОшибку(ОписаниеОшибки, ПараметрыПотока);
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Элемент Из Результат.ПеременныеОкружения.МассивСообщений Цикл
		Если ПеременныеОкружения.МассивСообщений.Найти(Элемент) = Неопределено Тогда
			ОписаниеОшибки = СтрШаблон("Ошибка обработки сообщений. Сообщение не содержалось в исходных данных:
			|%1",Элемент);
			ЗарегистрироватьОшибку(ОписаниеОшибки, ПараметрыПотока);
			Возврат Ложь;
		КонецЕсли
	КонецЦикла;
	
	ПараметрыПотока.ПеременныеОкружения = ПеременныеОкружения;
	ПараметрыПотока.МассивСообщений = ПеременныеОкружения.МассивСообщений;
	
	Возврат ОбработкаПотокаЗавершитьИтерацию(ПараметрыПотока, Соединение);
	
КонецФункции

Функция ВыполнитьПредопределенноеДействие(СистемныеПараметры, ПараметрыОбработчика, ТаблицаСообщений)
	
	ЗаписьЖурналаРегистрации(СтрШаблон("Действие предопределенное для очереди %1",СистемныеПараметры.КодПодписчика),УровеньЖурналаРегистрации.Ошибка);
	
КонецФункции

Функция ВыполнитьПроизвольныйКод(ПроизвольныйКод, Знач ПеременныеОкружения) Экспорт
	
	ТекстОшибки = "";
		
	Попытка
		Выполнить(ПроизвольныйКод);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	СтруктураВозврата = Новый Структура("ОписаниеОшибки,ПеременныеОкружения",ТекстОшибки,ПеременныеОкружения);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ОбработкаПотокаЗавершитьИтерацию(ПараметрыПотока, Соединение)
	
	ОбработкаПотокаЗафиксироватьДанныеШага(ПараметрыПотока, Перечисления.осТипыДанных.ОтправкаМассиваСообщений);
	
	Если ПараметрыПотока.МассивСообщений.Количество() И ТипЗнч(ПараметрыПотока.ТипОбработчика) = Тип("ПеречислениеСсылка.осТипыФильтров") Тогда
		Результат = ОбработкаСобытийОтправитьМассивСообщений(ПараметрыПотока, Соединение);
		Если Результат.Данные = Неопределено Тогда
			ЗарегистрироватьОшибку(Результат, ПараметрыПотока);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаПотокаЗафиксироватьДанныеШага(ПараметрыПотока, Перечисления.осТипыДанных.ФиксацияЧтенияСообщений);
		
	Результат = ОбработкаСобытийЗафиксироватьСмещения(ПараметрыПотока, Соединение);
	Если Результат.Данные = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОбработкаПотокаНачатьТранзакцию(ПараметрыПотока);
	
	МенеджерЗаписи = РегистрыСведений.осСостояниеТранзакций.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Подписчик = ПараметрыПотока.КодПодписчика;
	МенеджерЗаписи.Состояние = Перечисления.осСостоянияТранзакций.Активна;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Процедура ОбработкаПотокаЗафиксироватьТранзакцию(ПараметрыПотока);
	
	МенеджерЗаписи = РегистрыСведений.осСостояниеТранзакций.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Подписчик = ПараметрыПотока.КодПодписчика;
	МенеджерЗаписи.Состояние = Перечисления.осСостоянияТранзакций.НеАктивна;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Функция ОбработкаПотокаПолучитьСостояниеТранзакции(ПараметрыПотока);
	
	СостояниеТранзакции = Новый Структура;
		
	МенеджерЗаписи = РегистрыСведений.осСостояниеТранзакций.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Подписчик = ПараметрыПотока.КодПодписчика;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		СостояниеТранзакции.Вставить("Состояние",МенеджерЗаписи.Состояние);
		СостояниеТранзакции.Вставить("Идентификатор",МенеджерЗаписи.Идентификатор);
		Возврат СостояниеТранзакции;
	КонецЕсли;
	
	СостояниеТранзакции.Вставить("Состояние",Перечисления.осСостоянияТранзакций.НеОпределена);
	СостояниеТранзакции.Вставить("Идентификатор",Новый УникальныйИдентификатор);
	Возврат СостояниеТранзакции; 
	
КонецФункции

Функция ОбработкаПотокаЗавершитьПрерваннуюТранзакцию(ПараметрыПотока, Соединение);
	
	СостояниеТранзакции = ОбработкаПотокаПолучитьСостояниеТранзакции(ПараметрыПотока);
	Если СостояниеТранзакции.Состояние = Перечисления.осСостоянияТранзакций.НеАктивна Тогда
		Возврат Истина;
	КонецЕсли;
	
	Результат = ОбработкаСобытийУдалитьПодписчикаИзГруппы(ПараметрыПотока, Соединение);
	Если НЕ (Результат.КодОшибки = 40403 ИЛИ (Результат.Данные <> Неопределено И Результат.Данные)) Тогда
		ЗарегистрироватьОшибку(Результат, ПараметрыПотока);
		Возврат Ложь;
	КонецЕсли;
		
	Результат = ОбработкаСобытийПроверитьПодключение(ПараметрыПотока, Соединение);
	Если Результат.Данные = Неопределено ИЛИ НЕ Результат.Данные Тогда
		ЗарегистрироватьОшибку(Результат, ПараметрыПотока);
		Возврат Ложь;
	КонецЕсли;
		
	Результат = ОбработкаСобытийЗарегистрироватьПодписчикаВГруппе(ПараметрыПотока, Соединение);
	Если Результат.Данные = Неопределено ИЛИ НЕ Результат.Данные Тогда
		ЗарегистрироватьОшибку(Результат, ПараметрыПотока);
		Возврат Ложь;
	КонецЕсли;
		
	Результат = ОбработкаСобытийНазначитьРазделыПодписчику(ПараметрыПотока, Соединение);
	Если Результат.Данные = Неопределено ИЛИ НЕ Результат.Данные Тогда
		ЗарегистрироватьОшибку(Результат, ПараметрыПотока);
		Возврат Ложь;
	КонецЕсли;

		
	МенеджерЗаписи = РегистрыСведений.осДанныеТранзакции.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Подписчик = ПараметрыПотока.КодПодписчика;
	МенеджерЗаписи.Прочитать();
	
	Если НЕ МенеджерЗаписи.Выбран() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если МенеджерЗаписи.Идентификатор <> СостояниеТранзакции.Идентификатор Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПараметрыПотокаПрерваннойТразакции = ЗначениеИзСтрокиВнутр(МенеджерЗаписи.Данные);
	
	Если МенеджерЗаписи = Перечисления.осТипыДанных.ОтправкаМассиваСообщений Тогда
		ПараметрыПотокаПрерваннойТразакции.МассивСообщений.Очистить();
	КонецЕсли;
	          
	Возврат ОбработкаПотокаЗавершитьИтерацию(ПараметрыПотокаПрерваннойТразакции, Соединение);
	
КонецФункции

Процедура ОбработкаПотокаЗафиксироватьДанныеШага(ПараметрыПотока, ТипШага);
	
	МенеджерЗаписи = РегистрыСведений.осДанныеТранзакции.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Подписчик = ПараметрыПотока.КодПодписчика;
	МенеджерЗаписи.ТипШага = ТипШага;
	МенеджерЗаписи.Данные = ЗначениеВСтрокуВнутр(ПараметрыПотока);
	МенеджерЗаписи.Записать();
	
КонецПроцедуры


Функция ОбработкаСобытийПрочитатьСообщения(СистемныеПараметры, Соединение)
	
	ОписаниеВнешнегоМетода = осОчередиСообщенийСервер.ПолучитьОписаниеВнешнегоМетода(Перечисления.осВнешниеМетодыОбменаСообщениями.ПрочитатьСообщения);
	ОписаниеВнешнегоМетода.Группа = СистемныеПараметры.КодПравила;
	ОписаниеВнешнегоМетода.Подписчик = СистемныеПараметры.КодПодписчика;
	ОписаниеВнешнегоМетода.РазмерПачки = СистемныеПараметры.РазмерПачки;
	Возврат ВыполнитьВнешнийМетод(ОписаниеВнешнегоМетода, Соединение);
	
КонецФункции

Функция ОбработкаСобытийУдалитьПодписчикаИзГруппы(СистемныеПараметры, Соединение)  	
	
	ОписаниеВнешнегоМетода = осОчередиСообщенийСервер.ПолучитьОписаниеВнешнегоМетода(Перечисления.осВнешниеМетодыОбменаСообщениями.УдалитьПодписчикаИзГруппы);
	ОписаниеВнешнегоМетода.Группа = СистемныеПараметры.КодПравила;
	ОписаниеВнешнегоМетода.Подписчик = СистемныеПараметры.КодПодписчика;
	Возврат осОчередиСообщенийСервер.ВыполнитьВнешнийМетод(ОписаниеВнешнегоМетода, Соединение);
	
КонецФункции

Функция ОбработкаСобытийЗарегистрироватьПодписчикаВГруппе(СистемныеПараметры, Соединение)  	
	
	ОписаниеВнешнегоМетода = ПолучитьОписаниеВнешнегоМетода(Перечисления.осВнешниеМетодыОбменаСообщениями.ЗарегистрироватьПодписчикаВГруппе);
	ОписаниеВнешнегоМетода.Группа 						=  		СистемныеПараметры.КодПравила;
	ОписаниеВнешнегоМетода.Подписчик 					=  	СистемныеПараметры.КодПодписчика;
	ОписаниеВнешнегоМетода.РежимПодтвержденияСообщений  = Перечисления.осРежимыПодтвержденияСообщений.Ручной;
	ОписаниеВнешнегоМетода.РежимОбработкиОшибкиСмещения = Перечисления.осРежимыОбработкиОшибкиСмещения.УстановитьВНачальное;
	Возврат ВыполнитьВнешнийМетод(ОписаниеВнешнегоМетода, Соединение);
	
КонецФункции

Функция ОбработкаСобытийЗарегистрироватьПодписчикаВОчереди(СистемныеПараметры, Соединение)
	
	ОписаниеВнешнегоМетода = ПолучитьОписаниеВнешнегоМетода(Перечисления.осВнешниеМетодыОбменаСообщениями.ЗарегистрироватьПодписчикаВОчереди);
	ОписаниеВнешнегоМетода.Группа = СистемныеПараметры.КодПравила;
	ОписаниеВнешнегоМетода.Подписчик = СистемныеПараметры.КодПодписчика;
	ОписаниеВнешнегоМетода.Очередь = СистемныеПараметры.КодОчереди;
	Возврат ВыполнитьВнешнийМетод(ОписаниеВнешнегоМетода, Соединение);
	
КонецФункции

Функция ОбработкаСобытийПроверитьПодключение(СистемныеПараметры, Соединение)
	
	ОписаниеВнешнегоМетода = ПолучитьОписаниеВнешнегоМетода(Перечисления.осВнешниеМетодыОбменаСообщениями.ПроверитьПодключение);
	Возврат ВыполнитьВнешнийМетод(ОписаниеВнешнегоМетода, Соединение);
	
КонецФункции

Функция ОбработкаСобытийОтправитьМассивСообщений(ПараметрыПотока, Соединение);
	
	ОписаниеВнешнегоМетода = ПолучитьОписаниеВнешнегоМетода(Перечисления.осВнешниеМетодыОбменаСообщениями.ОтправитьМассивСообщений);
	ОписаниеВнешнегоМетода.Очередь = ПараметрыПотока.КодРезультирующейОчереди;
	ОписаниеВнешнегоМетода.МассивСообщений = ПараметрыПотока.МассивСообщений;
	Возврат ВыполнитьВнешнийМетод(ОписаниеВнешнегоМетода, Соединение);
	
КонецФункции

Функция ОбработкаСобытийОтправитьСообщение(Очередь, Сообщение, Соединение)
	
	ОписаниеВнешнегоМетода = ПолучитьОписаниеВнешнегоМетода(Перечисления.осВнешниеМетодыОбменаСообщениями.ОтправитьСообщение);
	ОписаниеВнешнегоМетода.Очередь = Очередь;
	ОписаниеВнешнегоМетода.Сообщение = Сообщение;
	Возврат ВыполнитьВнешнийМетод(ОписаниеВнешнегоМетода, Соединение);
	
КонецФункции

Функция ОбработкаСобытийЗафиксироватьСмещения(ПараметрыПотока, Соединение)
	
	ОписаниеВнешнегоМетода = ПолучитьОписаниеВнешнегоМетода(Перечисления.осВнешниеМетодыОбменаСообщениями.ЗафиксироватьСмещения);
	ОписаниеВнешнегоМетода.Группа = ПараметрыПотока.КодПравила;
	ОписаниеВнешнегоМетода.Подписчик = ПараметрыПотока.КодПодписчика;
	ОписаниеВнешнегоМетода.ТаблицаСмещений = ПараметрыПотока.ТаблицаСмещений;
	Возврат ВыполнитьВнешнийМетод(ОписаниеВнешнегоМетода, Соединение);
	
КонецФункции

Функция ОбработкаСобытийПолучитьСмещенияПодписчика(СистемныеПараметры, Соединение)
	
	ОписаниеВнешнегоМетода = ПолучитьОписаниеВнешнегоМетода(Перечисления.осВнешниеМетодыОбменаСообщениями.ПолучитьСмещенияПодписчика);
	ОписаниеВнешнегоМетода.Группа = СистемныеПараметры.КодПравила;
	ОписаниеВнешнегоМетода.Подписчик = СистемныеПараметры.КодПодписчика;
	ОписаниеВнешнегоМетода.ТаблицаРазделов = СистемныеПараметры.ТаблицаРазделов;
	Возврат ВыполнитьВнешнийМетод(ОписаниеВнешнегоМетода, Соединение);
	
КонецФункции

Функция ОбработкаСобытийНазначитьРазделыПодписчику(СистемныеПараметры, Соединение)
	
	ОписаниеВнешнегоМетода = ПолучитьОписаниеВнешнегоМетода(Перечисления.осВнешниеМетодыОбменаСообщениями.НазначитьРазделыПодписчику);
	ОписаниеВнешнегоМетода.Группа = СистемныеПараметры.КодПравила;
	ОписаниеВнешнегоМетода.Подписчик = СистемныеПараметры.КодПодписчика;
	ОписаниеВнешнегоМетода.ТаблицаРазделов = СистемныеПараметры.ТаблицаРазделов;
	Возврат ВыполнитьВнешнийМетод(ОписаниеВнешнегоМетода, Соединение);
	
КонецФункции

// Маска - текстовая строка. Допустимы следующие символы:
// . - любой символ
// + - один или более раз, пример ".+" - один или более любой символ.
// * - ноль или более раз, пример ".*" - любое количество любых символов (даже ни одного).
// [n-m] - символ от m до n. Например: [a-zA-Z_:]* - строка любой длины, состоящая из больших и маленьких латинских символов, знаков "_" и ":" , Еще пример: "[0-9]+" - одна или более цифр(а).
// \d - цифра, пример 
// \d+ - одна или более цифр(а).
// \D - не цифра.
// \s - пробельный символ - ТАБ, пробел, перенос строки, возврат каретки и т.п.
// \S - непробельный символ.
// \w - буква, цифра, подчеркивание.
// \W - не буква, не цифра и не подчеркивание соответственно.
// ^ - начало текста, например "^\d+" - строка начинается с цифры.
// $ - конец текста, например "\D+$" - строка заканчивается НЕ цифрой.
// {m,n} - шаблон для от m до n символов, например "\d{2,4}" - от двух до четырех цифр. Можно указать одну и всего цифру для строгого соответвия.
// \ - экранирует спецсимволы. Например, "\." - символ точки.
// СтандартнаяМаска = "[a-zA-Z][a-zA-Z0-9\.]*";
Функция ПроверитьСтрокуНаСоответствиеМаске(Строка, Маска=Неопределено) Экспорт
	
	Если Маска = Неопределено Тогда
		Маска = осОчередиСообщенийСерверПовтИсп.ПолучитьДопустимуюМаску();
	КонецЕсли;
	
	сткВозврат = Новый Структура;
	сткВозврат.Вставить("ЕстьОшибка",Истина);
	сткВозврат.Вставить("ОписаниеОшибки", "Ошибка в коде");
	сткВозврат.Вставить("Результат",Неопределено);
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(
	"<Model xmlns=""http://v8.1c.ru/8.1/xdto"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""Model"">
	|<package targetNamespace=""sample-my-package"">
	|<valueType name=""testtypes"" base=""xs:string"">
	|<pattern>" + Маска + "</pattern>
	|</valueType>
	|<objectType name=""TestObj"">
	|<property xmlns:d4p1=""sample-my-package"" name=""TestItem"" type=""d4p1:testtypes""/>
	|</objectType>
	|</package>
	|</Model>");
	
	Модель = ФабрикаXDTO.ПрочитатьXML(Чтение);
	
	Попытка
		МояФабрикаXDTO = Новый ФабрикаXDTO(Модель);
	Исключение
		сткВозврат.ЕстьОшибка = Истина;
		сткВозврат.ОписаниеОшибки = "Ошибка маски";
		Возврат сткВозврат;
	КонецПопытки;
	
	Пакет = МояФабрикаXDTO.Пакеты.Получить("sample-my-package");
	Тест = МояФабрикаXDTO.Создать(Пакет.Получить("TestObj"));
	
	Попытка
		Тест.TestItem = Строка;
	Исключение
		сткВозврат.ЕстьОшибка = Истина;
		сткВозврат.ОписаниеОшибки = СтрШаблон("Строка не соответствует маске (%1)", Маска);
		сткВозврат.Результат = Ложь;
		Возврат сткВозврат;
	КонецПопытки;
	
	сткВозврат.ЕстьОшибка = Ложь;
	сткВозврат.ОписаниеОшибки = "";
	сткВозврат.Результат = Истина;
	Возврат сткВозврат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗарегистрироватьОшибку(СообщениеОбОшибке, СистемныеПараметры)
	
	Если ТипЗнч(СообщениеОбОшибке) = Тип("Структура") Тогда 
		ТекстОшибки = СтрШаблон("Ошибка выполнения запроса к очереди сообщений.
		|Код ошибки: %1
		|Описание ошибки: %2",
		СообщениеОбОшибке.КодОшибки,
		СообщениеОбОшибке.ОписаниеОшибки);		
	Иначе
		ТекстОшибки = СтрШаблон("Ошибка обработки сообщений.
		|Описание ошибки: %1",
		ОчиститьСообщениеОбОшибкеОтНезначащейИнформации(СообщениеОбОшибке));
	КонецЕсли;
	
	КомментарийЗаписиШаблон = "%1
	|Дополнительные сведения:
	|Очередь: %2
	|Правило: %3
	|Подписчик: %4";
	КомментарийЗаписи = СтрШаблон(КомментарийЗаписиШаблон,
	ТекстОшибки,
	СистемныеПараметры.КодОчереди,
	СистемныеПараметры.КодПравила,
	СистемныеПараметры.КодПодписчика);					
	
	ЗаписьЖурналаРегистрации("ОчередиСообщений", 
	УровеньЖурналаРегистрации.Ошибка, 
	Метаданные.Подсистемы.ОчередиСообщений, 
	, 
	КомментарийЗаписи);
	
КонецПроцедуры

Функция ПолучитьИмяПодписчика(Правило, Номер)

	Возврат СтрШаблон("%1.%2",Правило,Формат(Номер, "ЧН=0; ЧГ="));	

КонецФункции

Функция ВыполнитьОтправкуСообщенийВОчередь(Очередь, МассивСообщений, Соединение)
	//
	//РезультатВыполненияМетода = осПрограммныйИнтерфейс.ОтправитьМассивСообщений(Очередь, МассивСообщений, Соединение);
	//
	//Если РезультатВыполненияМетода.КодОшибки <> Неопределено Тогда
	//	ОписаниеОшибкиШаблон = "Очередь: %1, ошибка: %2";
	//	ОписаниеОшибки = СтрШаблон(ОписаниеОшибкиШаблон, Очередь, РезультатВыполненияМетода.ОписаниеОшибки);
	//	ЗаписьЖурналаРегистрации("ОбработкаОчередиСобытий", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
	//	Возврат Ложь;
	//КонецЕсли; 
	//
	//НастройкиОтбора = Новый Массив;
	//НастройкиОтбора.Добавить(Новый Структура("ИмяПоля,ВидСравнения,Значение,Использование", "КодОшибкиДанных", ВидСравнения.НеРавно, 0, Истина));
	////ТаблицаОшибок = ОтфильтроватьТаблицуЗначенийПоОтбору(РезультатВыполненияМетода.Данные, НастройкиОтбора);
	//
	//Если ТаблицаОшибок.Количество() = 0 Тогда 
	//	Возврат Истина;
	//КонецЕсли;
	//
	//Для Каждого СтрокаСОшибкой Из ТаблицаОшибок Цикл 
	//	ОписаниеОшибкиШаблон = "Очередь: %1, раздел: %2, смещение: %3, ошибка: %4";
	//	ОписаниеОшибки = СтрШаблон(ОписаниеОшибкиШаблон, Очередь, СтрокаСОшибкой.Раздел, СтрокаСОшибкой.Смещение, СтрокаСОшибкой.ОписаниеОшибкиДанных);
	//	ЗаписьЖурналаРегистрации("ОбработкаОчередиСобытий", УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
	//КонецЦикла;
	//
	//Возврат Ложь;
	
КонецФункции	

Функция ПрименитьПравилоФильтрацииСКД(МассивВходныхДанных, ОписаниеПравилаФильтрации)
	
	МассивСсылок = Новый Массив;	
	Для Каждого ЭлементВходныхДанных Из МассивВходныхДанных Цикл
		Попытка
			ОбъектФильтрации = ЗначениеИзСтрокиВнутр(ЭлементВходныхДанных);
		Исключение
			ВызватьИсключение ОписаниеОшибкиПримененияПравилаФильтрации(ОписаниеПравилаФильтрации, ОписаниеОшибки());
		КонецПопытки;
		МассивСсылок.Добавить(ОбъектФильтрации);		 
	КонецЦикла;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ОписаниеПравилаФильтрации.ЗначениеПравила);
	СхемаКомпоновкиДанных = СериализаторXDTO.ПрочитатьXML(ЧтениеXML, Тип("СхемаКомпоновкиДанных"));
	НастройкиКомпоновкиДанных = ОписаниеПравилаФильтрации.НастройкиПравила;		
	
	// В настройках компоновки данных готовим вывод в таблицу
	ПолеГруппировки = НастройкиКомпоновкиДанных.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки.Использование = Истина;
	ВыбранноеПоле = ПолеГруппировки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Заголовок = "Ссылка";
	ВыбранноеПоле.Использование = Истина;
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	
	// Инициализируем компоновщик настроек компоновки данных, загружаем настройки
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
	
	// Устанавливаем отбор по массиву ссылок объектов
	ЭлементОтбораКомпоновкиДанных = КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораКомпоновкиДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбораКомпоновкиДанных.ПравоеЗначение = МассивСсылок;
	ЭлементОтбораКомпоновкиДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбораКомпоновкиДанных.Использование = Истина; 	
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет);   
	ПроцессорКомпоновки.Сбросить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТЗ = ПроцессорВывода.Вывести(ПроцессорКомпоновки); 
	
	РезультатВыполнения = Новый Массив;
	МассивРезультата = ТЗ.ВыгрузитьКолонку("Ссылка");
	Для	Каждого ЭлементРезультата Из МассивРезультата Цикл 
		РезультатВыполнения.Добавить(ЗначениеВСтрокуВнутр(ЭлементРезультата));	
	КонецЦикла;	
	
	Возврат РезультатВыполнения;
	
КонецФункции	

Функция ПрименитьПравилоФильтрацииПроизвольныйКод(МассивВходныхДанных, ОписаниеПравилаФильтрации)
	
	РезультатВыполнения = Неопределено;
	
	ПроизвольныйКод = ОписаниеПравилаФильтрации.ЗначениеПравила;
	ТаблицаНастроекОтбора = ОписаниеПравилаФильтрации.НастройкиПравила;
	МассивСообщений = МассивВходныхДанных;   	
	
	УстановитьБезопасныйРежим(Истина);
	Выполнить(ПроизвольныйКод); 
	УстановитьБезопасныйРежим(Ложь);
	
	Если ТипЗнч(РезультатВыполнения) <> Тип("Массив") Тогда 
		Комментарий = СтрШаблон("Неверный тип значения результата (ожидается ""Массив"", получено ""%1"").", Строка(ТипЗнч(РезультатВыполнения)));
		ВызватьИсключение ОписаниеОшибкиПримененияПравилаФильтрации(ОписаниеПравилаФильтрации, Комментарий);
	КонецЕсли;
	
	Для Каждого СтрокаМассива Из РезультатВыполнения Цикл 
		Если ТипЗнч(СтрокаМассива) <> Тип("Строка") Тогда
			Комментарий = СтрШаблон("Неверный тип значения элемента результата (ожидается ""Строка"", получено ""%1"").");
			ВызватьИсключение ОписаниеОшибкиПримененияПравилаФильтрации(ОписаниеПравилаФильтрации, Комментарий);	
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатВыполнения;  
	
КонецФункции

Функция ОписаниеОшибкиПримененияПравилаФильтрации(ОписаниеПравилаФильтрации, Комментарий)
	Шаблон = ШаблонТекстаОшибкиПримененияПравилаФильтрации();	
	Возврат СтрШаблон(Шаблон, ОписаниеПравилаФильтрации.НаименованиеПравила, 
	ОписаниеПравилаФильтрации.Очередь, 
	ОписаниеПравилаФильтрации.ИмяОчереди, Комментарий);	
КонецФункции

Функция ШаблонТекстаОшибкиПримененияПравилаФильтрации()
	Возврат "Ошибка применения правила фильтрации ""%1"" для очереди ""%2"" (%3). %4";	
КонецФункции

Функция ШаблонТекстаОшибкиВыполненияДействия()
	Возврат "Ошибка выполнения действия ""%1"" для очереди ""%2"". %3";	
КонецФункции

Функция ПолучитьСтруктуруПараметровОбработкиОчереди(ТипОчереди)
	СоответствиеМетодов = Новый Соответствие;
	СоответствиеМетодов.Вставить(Перечисления.осРежимыОбработки.Исходная, ПараметрыОперацииПеремещенияСообщений());
	СоответствиеМетодов.Вставить(Перечисления.осРежимыОбработки.Целевая, СтруктураОписанияДействия());
	Возврат СоответствиеМетодов.Получить(ТипОчереди);
КонецФункции

Функция СтруктураОписанияПравилаФильтрации()
	Возврат Новый Структура("НаименованиеПравила,ТипПравила,ЗначениеПравила,НастройкиПравила,ИмяОчереди,Очередь");	
КонецФункции

Функция СтруктураОписанияДействия()
	ОписаниеДействия = Новый Структура("ОчередьОбработки,ВыполнятьОднократно,ОписаниеФоновогоЗаданияОбработки", "", Ложь);
	ОписаниеДействия.ОписаниеФоновогоЗаданияОбработки = осОчередиСообщенийСервер.ПолучитьОписаниеФоновогоЗадания();
	Возврат ОписаниеДействия;	
КонецФункции

Функция ПараметрыОперацииПеремещенияСообщений()
	Возврат Новый Структура("ОписаниеПравилаФильтрации,РезультирующаяОчередь",СтруктураОписанияПравилаФильтрации(),"");	
КонецФункции

#КонецОбласти
